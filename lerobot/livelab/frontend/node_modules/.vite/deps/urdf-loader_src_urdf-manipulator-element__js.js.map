{
  "version": 3,
  "sources": ["../../three/examples/jsm/controls/OrbitControls.js", "../../urdf-loader/src/URDFClasses.js", "../../urdf-loader/src/URDFLoader.js", "../../urdf-loader/src/urdf-viewer-element.js", "../../urdf-loader/src/URDFDragControls.js", "../../urdf-loader/src/urdf-manipulator-element.js"],
  "sourcesContent": ["import {\n\tControls,\n\tMOUSE,\n\tQuaternion,\n\tSpherical,\n\tTOUCH,\n\tVector2,\n\tVector3,\n\tPlane,\n\tRay,\n\tMathUtils\n} from 'three';\n\n/**\n * Fires when the camera has been transformed by the controls.\n *\n * @event OrbitControls#change\n * @type {Object}\n */\nconst _changeEvent = { type: 'change' };\n\n/**\n * Fires when an interaction was initiated.\n *\n * @event OrbitControls#start\n * @type {Object}\n */\nconst _startEvent = { type: 'start' };\n\n/**\n * Fires when an interaction has finished.\n *\n * @event OrbitControls#end\n * @type {Object}\n */\nconst _endEvent = { type: 'end' };\n\nconst _ray = new Ray();\nconst _plane = new Plane();\nconst _TILT_LIMIT = Math.cos( 70 * MathUtils.DEG2RAD );\n\nconst _v = new Vector3();\nconst _twoPI = 2 * Math.PI;\n\nconst _STATE = {\n\tNONE: - 1,\n\tROTATE: 0,\n\tDOLLY: 1,\n\tPAN: 2,\n\tTOUCH_ROTATE: 3,\n\tTOUCH_PAN: 4,\n\tTOUCH_DOLLY_PAN: 5,\n\tTOUCH_DOLLY_ROTATE: 6\n};\nconst _EPS = 0.000001;\n\n\n/**\n * Orbit controls allow the camera to orbit around a target.\n *\n * OrbitControls performs orbiting, dollying (zooming), and panning. Unlike {@link TrackballControls},\n * it maintains the \"up\" direction `object.up` (+Y by default).\n *\n * - Orbit: Left mouse / touch: one-finger move.\n * - Zoom: Middle mouse, or mousewheel / touch: two-finger spread or squish.\n * - Pan: Right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move.\n *\n * ```js\n * const controls = new OrbitControls( camera, renderer.domElement );\n *\n * // controls.update() must be called after any manual changes to the camera's transform\n * camera.position.set( 0, 20, 100 );\n * controls.update();\n *\n * function animate() {\n *\n * \t// required if controls.enableDamping or controls.autoRotate are set to true\n * \tcontrols.update();\n *\n * \trenderer.render( scene, camera );\n *\n * }\n * ```\n *\n * @augments Controls\n * @three_import import { OrbitControls } from 'three/addons/controls/OrbitControls.js';\n */\nclass OrbitControls extends Controls {\n\n\t/**\n\t * Constructs a new controls instance.\n\t *\n\t * @param {Object3D} object - The object that is managed by the controls.\n\t * @param {?HTMLDOMElement} domElement - The HTML element used for event listeners.\n\t */\n\tconstructor( object, domElement = null ) {\n\n\t\tsuper( object, domElement );\n\n\t\tthis.state = _STATE.NONE;\n\n\t\t/**\n\t\t * The focus point of the controls, the `object` orbits around this.\n\t\t * It can be updated manually at any point to change the focus of the controls.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.target = new Vector3();\n\n\t\t/**\n\t\t * The focus point of the `minTargetRadius` and `maxTargetRadius` limits.\n\t\t * It can be updated manually at any point to change the center of interest\n\t\t * for the `target`.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.cursor = new Vector3();\n\n\t\t/**\n\t\t * How far you can dolly in (perspective camera only).\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.minDistance = 0;\n\n\t\t/**\n\t\t * How far you can dolly out (perspective camera only).\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */\n\t\tthis.maxDistance = Infinity;\n\n\t\t/**\n\t\t * How far you can zoom in (orthographic camera only).\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.minZoom = 0;\n\n\t\t/**\n\t\t * How far you can zoom out (orthographic camera only).\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */\n\t\tthis.maxZoom = Infinity;\n\n\t\t/**\n\t\t * How close you can get the target to the 3D `cursor`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.minTargetRadius = 0;\n\n\t\t/**\n\t\t * How far you can move the target from the 3D `cursor`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Infinity\n\t\t */\n\t\tthis.maxTargetRadius = Infinity;\n\n\t\t/**\n\t\t * How far you can orbit vertically, lower limit. Range is `[0, Math.PI]` radians.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.minPolarAngle = 0;\n\n\t\t/**\n\t\t * How far you can orbit vertically, upper limit. Range is `[0, Math.PI]` radians.\n\t\t *\n\t\t * @type {number}\n\t\t * @default Math.PI\n\t\t */\n\t\tthis.maxPolarAngle = Math.PI;\n\n\t\t/**\n\t\t * How far you can orbit horizontally, lower limit. If set, the interval `[ min, max ]`\n\t\t * must be a sub-interval of `[ - 2 PI, 2 PI ]`, with `( max - min < 2 PI )`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default -Infinity\n\t\t */\n\t\tthis.minAzimuthAngle = - Infinity;\n\n\t\t/**\n\t\t * How far you can orbit horizontally, upper limit. If set, the interval `[ min, max ]`\n\t\t * must be a sub-interval of `[ - 2 PI, 2 PI ]`, with `( max - min < 2 PI )`.\n\t\t *\n\t\t * @type {number}\n\t\t * @default -Infinity\n\t\t */\n\t\tthis.maxAzimuthAngle = Infinity;\n\n\t\t/**\n\t\t * Set to `true` to enable damping (inertia), which can be used to give a sense of weight\n\t\t * to the controls. Note that if this is enabled, you must call `update()` in your animation\n\t\t * loop.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.enableDamping = false;\n\n\t\t/**\n\t\t * The damping inertia used if `enableDamping` is set to `true`.\n\t\t *\n\t\t * Note that for this to work, you must call `update()` in your animation loop.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0.05\n\t\t */\n\t\tthis.dampingFactor = 0.05;\n\n\t\t/**\n\t\t * Enable or disable zooming (dollying) of the camera.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.enableZoom = true;\n\n\t\t/**\n\t\t * Speed of zooming / dollying.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.zoomSpeed = 1.0;\n\n\t\t/**\n\t\t * Enable or disable horizontal and vertical rotation of the camera.\n\t\t *\n\t\t * Note that it is possible to disable a single axis by setting the min and max of the\n\t\t * `minPolarAngle` or `minAzimuthAngle` to the same value, which will cause the vertical\n\t\t * or horizontal rotation to be fixed at that value.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.enableRotate = true;\n\n\t\t/**\n\t\t * Speed of rotation.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.rotateSpeed = 1.0;\n\n\t\t/**\n\t\t * How fast to rotate the camera when the keyboard is used.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.keyRotateSpeed = 1.0;\n\n\t\t/**\n\t\t * Enable or disable camera panning.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.enablePan = true;\n\n\t\t/**\n\t\t * Speed of panning.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 1\n\t\t */\n\t\tthis.panSpeed = 1.0;\n\n\t\t/**\n\t\t * Defines how the camera's position is translated when panning. If `true`, the camera pans\n\t\t * in screen space. Otherwise, the camera pans in the plane orthogonal to the camera's up\n\t\t * direction.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.screenSpacePanning = true;\n\n\t\t/**\n\t\t * How fast to pan the camera when the keyboard is used in\n\t\t * pixels per keypress.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 7\n\t\t */\n\t\tthis.keyPanSpeed = 7.0;\n\n\t\t/**\n\t\t * Setting this property to `true` allows to zoom to the cursor's position.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.zoomToCursor = false;\n\n\t\t/**\n\t\t * Set to true to automatically rotate around the target\n\t\t *\n\t\t * Note that if this is enabled, you must call `update()` in your animation loop.\n\t\t * If you want the auto-rotate speed to be independent of the frame rate (the refresh\n\t\t * rate of the display), you must pass the time `deltaTime`, in seconds, to `update()`.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.autoRotate = false;\n\n\t\t/**\n\t\t * How fast to rotate around the target if `autoRotate` is `true`. The default  equates to 30 seconds\n\t\t * per orbit at 60fps.\n\t\t *\n\t\t * Note that if `autoRotate` is enabled, you must call `update()` in your animation loop.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 2\n\t\t */\n\t\tthis.autoRotateSpeed = 2.0;\n\n\t\t/**\n\t\t * This object contains references to the keycodes for controlling camera panning.\n\t\t *\n\t\t * ```js\n\t\t * controls.keys = {\n\t\t * \tLEFT: 'ArrowLeft', //left arrow\n\t\t * \tUP: 'ArrowUp', // up arrow\n\t\t * \tRIGHT: 'ArrowRight', // right arrow\n\t\t * \tBOTTOM: 'ArrowDown' // down arrow\n\t\t * }\n\t\t * ```\n\t\t * @type {Object}\n\t\t */\n\t\tthis.keys = { LEFT: 'ArrowLeft', UP: 'ArrowUp', RIGHT: 'ArrowRight', BOTTOM: 'ArrowDown' };\n\n\t\t/**\n\t\t * This object contains references to the mouse actions used by the controls.\n\t\t *\n\t\t * ```js\n\t\t * controls.mouseButtons = {\n\t\t * \tLEFT: THREE.MOUSE.ROTATE,\n\t\t * \tMIDDLE: THREE.MOUSE.DOLLY,\n\t\t * \tRIGHT: THREE.MOUSE.PAN\n\t\t * }\n\t\t * ```\n\t\t * @type {Object}\n\t\t */\n\t\tthis.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\n\n\t\t/**\n\t\t * This object contains references to the touch actions used by the controls.\n\t\t *\n\t\t * ```js\n\t\t * controls.mouseButtons = {\n\t\t * \tONE: THREE.TOUCH.ROTATE,\n\t\t * \tTWO: THREE.TOUCH.DOLLY_PAN\n\t\t * }\n\t\t * ```\n\t\t * @type {Object}\n\t\t */\n\t\tthis.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n\t\t/**\n\t\t * Used internally by `saveState()` and `reset()`.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.target0 = this.target.clone();\n\n\t\t/**\n\t\t * Used internally by `saveState()` and `reset()`.\n\t\t *\n\t\t * @type {Vector3}\n\t\t */\n\t\tthis.position0 = this.object.position.clone();\n\n\t\t/**\n\t\t * Used internally by `saveState()` and `reset()`.\n\t\t *\n\t\t * @type {number}\n\t\t */\n\t\tthis.zoom0 = this.object.zoom;\n\n\t\t// the target DOM element for key events\n\t\tthis._domElementKeyEvents = null;\n\n\t\t// internals\n\n\t\tthis._lastPosition = new Vector3();\n\t\tthis._lastQuaternion = new Quaternion();\n\t\tthis._lastTargetPosition = new Vector3();\n\n\t\t// so camera.up is the orbit axis\n\t\tthis._quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n\t\tthis._quatInverse = this._quat.clone().invert();\n\n\t\t// current position in spherical coordinates\n\t\tthis._spherical = new Spherical();\n\t\tthis._sphericalDelta = new Spherical();\n\n\t\tthis._scale = 1;\n\t\tthis._panOffset = new Vector3();\n\n\t\tthis._rotateStart = new Vector2();\n\t\tthis._rotateEnd = new Vector2();\n\t\tthis._rotateDelta = new Vector2();\n\n\t\tthis._panStart = new Vector2();\n\t\tthis._panEnd = new Vector2();\n\t\tthis._panDelta = new Vector2();\n\n\t\tthis._dollyStart = new Vector2();\n\t\tthis._dollyEnd = new Vector2();\n\t\tthis._dollyDelta = new Vector2();\n\n\t\tthis._dollyDirection = new Vector3();\n\t\tthis._mouse = new Vector2();\n\t\tthis._performCursorZoom = false;\n\n\t\tthis._pointers = [];\n\t\tthis._pointerPositions = {};\n\n\t\tthis._controlActive = false;\n\n\t\t// event listeners\n\n\t\tthis._onPointerMove = onPointerMove.bind( this );\n\t\tthis._onPointerDown = onPointerDown.bind( this );\n\t\tthis._onPointerUp = onPointerUp.bind( this );\n\t\tthis._onContextMenu = onContextMenu.bind( this );\n\t\tthis._onMouseWheel = onMouseWheel.bind( this );\n\t\tthis._onKeyDown = onKeyDown.bind( this );\n\n\t\tthis._onTouchStart = onTouchStart.bind( this );\n\t\tthis._onTouchMove = onTouchMove.bind( this );\n\n\t\tthis._onMouseDown = onMouseDown.bind( this );\n\t\tthis._onMouseMove = onMouseMove.bind( this );\n\n\t\tthis._interceptControlDown = interceptControlDown.bind( this );\n\t\tthis._interceptControlUp = interceptControlUp.bind( this );\n\n\t\t//\n\n\t\tif ( this.domElement !== null ) {\n\n\t\t\tthis.connect( this.domElement );\n\n\t\t}\n\n\t\tthis.update();\n\n\t}\n\n\tconnect( element ) {\n\n\t\tsuper.connect( element );\n\n\t\tthis.domElement.addEventListener( 'pointerdown', this._onPointerDown );\n\t\tthis.domElement.addEventListener( 'pointercancel', this._onPointerUp );\n\n\t\tthis.domElement.addEventListener( 'contextmenu', this._onContextMenu );\n\t\tthis.domElement.addEventListener( 'wheel', this._onMouseWheel, { passive: false } );\n\n\t\tconst document = this.domElement.getRootNode(); // offscreen canvas compatibility\n\t\tdocument.addEventListener( 'keydown', this._interceptControlDown, { passive: true, capture: true } );\n\n\t\tthis.domElement.style.touchAction = 'none'; // disable touch scroll\n\n\t}\n\n\tdisconnect() {\n\n\t\tthis.domElement.removeEventListener( 'pointerdown', this._onPointerDown );\n\t\tthis.domElement.removeEventListener( 'pointermove', this._onPointerMove );\n\t\tthis.domElement.removeEventListener( 'pointerup', this._onPointerUp );\n\t\tthis.domElement.removeEventListener( 'pointercancel', this._onPointerUp );\n\n\t\tthis.domElement.removeEventListener( 'wheel', this._onMouseWheel );\n\t\tthis.domElement.removeEventListener( 'contextmenu', this._onContextMenu );\n\n\t\tthis.stopListenToKeyEvents();\n\n\t\tconst document = this.domElement.getRootNode(); // offscreen canvas compatibility\n\t\tdocument.removeEventListener( 'keydown', this._interceptControlDown, { capture: true } );\n\n\t\tthis.domElement.style.touchAction = 'auto';\n\n\t}\n\n\tdispose() {\n\n\t\tthis.disconnect();\n\n\t}\n\n\t/**\n\t * Get the current vertical rotation, in radians.\n\t *\n\t * @return {number} The current vertical rotation, in radians.\n\t */\n\tgetPolarAngle() {\n\n\t\treturn this._spherical.phi;\n\n\t}\n\n\t/**\n\t * Get the current horizontal rotation, in radians.\n\t *\n\t * @return {number} The current horizontal rotation, in radians.\n\t */\n\tgetAzimuthalAngle() {\n\n\t\treturn this._spherical.theta;\n\n\t}\n\n\t/**\n\t * Returns the distance from the camera to the target.\n\t *\n\t * @return {number} The distance from the camera to the target.\n\t */\n\tgetDistance() {\n\n\t\treturn this.object.position.distanceTo( this.target );\n\n\t}\n\n\t/**\n\t * Adds key event listeners to the given DOM element.\n\t * `window` is a recommended argument for using this method.\n\t *\n\t * @param {HTMLDOMElement} domElement - The DOM element\n\t */\n\tlistenToKeyEvents( domElement ) {\n\n\t\tdomElement.addEventListener( 'keydown', this._onKeyDown );\n\t\tthis._domElementKeyEvents = domElement;\n\n\t}\n\n\t/**\n\t * Removes the key event listener previously defined with `listenToKeyEvents()`.\n\t */\n\tstopListenToKeyEvents() {\n\n\t\tif ( this._domElementKeyEvents !== null ) {\n\n\t\t\tthis._domElementKeyEvents.removeEventListener( 'keydown', this._onKeyDown );\n\t\t\tthis._domElementKeyEvents = null;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Save the current state of the controls. This can later be recovered with `reset()`.\n\t */\n\tsaveState() {\n\n\t\tthis.target0.copy( this.target );\n\t\tthis.position0.copy( this.object.position );\n\t\tthis.zoom0 = this.object.zoom;\n\n\t}\n\n\t/**\n\t * Reset the controls to their state from either the last time the `saveState()`\n\t * was called, or the initial state.\n\t */\n\treset() {\n\n\t\tthis.target.copy( this.target0 );\n\t\tthis.object.position.copy( this.position0 );\n\t\tthis.object.zoom = this.zoom0;\n\n\t\tthis.object.updateProjectionMatrix();\n\t\tthis.dispatchEvent( _changeEvent );\n\n\t\tthis.update();\n\n\t\tthis.state = _STATE.NONE;\n\n\t}\n\n\tupdate( deltaTime = null ) {\n\n\t\tconst position = this.object.position;\n\n\t\t_v.copy( position ).sub( this.target );\n\n\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t_v.applyQuaternion( this._quat );\n\n\t\t// angle from z-axis around y-axis\n\t\tthis._spherical.setFromVector3( _v );\n\n\t\tif ( this.autoRotate && this.state === _STATE.NONE ) {\n\n\t\t\tthis._rotateLeft( this._getAutoRotationAngle( deltaTime ) );\n\n\t\t}\n\n\t\tif ( this.enableDamping ) {\n\n\t\t\tthis._spherical.theta += this._sphericalDelta.theta * this.dampingFactor;\n\t\t\tthis._spherical.phi += this._sphericalDelta.phi * this.dampingFactor;\n\n\t\t} else {\n\n\t\t\tthis._spherical.theta += this._sphericalDelta.theta;\n\t\t\tthis._spherical.phi += this._sphericalDelta.phi;\n\n\t\t}\n\n\t\t// restrict theta to be between desired limits\n\n\t\tlet min = this.minAzimuthAngle;\n\t\tlet max = this.maxAzimuthAngle;\n\n\t\tif ( isFinite( min ) && isFinite( max ) ) {\n\n\t\t\tif ( min < - Math.PI ) min += _twoPI; else if ( min > Math.PI ) min -= _twoPI;\n\n\t\t\tif ( max < - Math.PI ) max += _twoPI; else if ( max > Math.PI ) max -= _twoPI;\n\n\t\t\tif ( min <= max ) {\n\n\t\t\t\tthis._spherical.theta = Math.max( min, Math.min( max, this._spherical.theta ) );\n\n\t\t\t} else {\n\n\t\t\t\tthis._spherical.theta = ( this._spherical.theta > ( min + max ) / 2 ) ?\n\t\t\t\t\tMath.max( min, this._spherical.theta ) :\n\t\t\t\t\tMath.min( max, this._spherical.theta );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// restrict phi to be between desired limits\n\t\tthis._spherical.phi = Math.max( this.minPolarAngle, Math.min( this.maxPolarAngle, this._spherical.phi ) );\n\n\t\tthis._spherical.makeSafe();\n\n\n\t\t// move target to panned location\n\n\t\tif ( this.enableDamping === true ) {\n\n\t\t\tthis.target.addScaledVector( this._panOffset, this.dampingFactor );\n\n\t\t} else {\n\n\t\t\tthis.target.add( this._panOffset );\n\n\t\t}\n\n\t\t// Limit the target distance from the cursor to create a sphere around the center of interest\n\t\tthis.target.sub( this.cursor );\n\t\tthis.target.clampLength( this.minTargetRadius, this.maxTargetRadius );\n\t\tthis.target.add( this.cursor );\n\n\t\tlet zoomChanged = false;\n\t\t// adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\n\t\t// we adjust zoom later in these cases\n\t\tif ( this.zoomToCursor && this._performCursorZoom || this.object.isOrthographicCamera ) {\n\n\t\t\tthis._spherical.radius = this._clampDistance( this._spherical.radius );\n\n\t\t} else {\n\n\t\t\tconst prevRadius = this._spherical.radius;\n\t\t\tthis._spherical.radius = this._clampDistance( this._spherical.radius * this._scale );\n\t\t\tzoomChanged = prevRadius != this._spherical.radius;\n\n\t\t}\n\n\t\t_v.setFromSpherical( this._spherical );\n\n\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t_v.applyQuaternion( this._quatInverse );\n\n\t\tposition.copy( this.target ).add( _v );\n\n\t\tthis.object.lookAt( this.target );\n\n\t\tif ( this.enableDamping === true ) {\n\n\t\t\tthis._sphericalDelta.theta *= ( 1 - this.dampingFactor );\n\t\t\tthis._sphericalDelta.phi *= ( 1 - this.dampingFactor );\n\n\t\t\tthis._panOffset.multiplyScalar( 1 - this.dampingFactor );\n\n\t\t} else {\n\n\t\t\tthis._sphericalDelta.set( 0, 0, 0 );\n\n\t\t\tthis._panOffset.set( 0, 0, 0 );\n\n\t\t}\n\n\t\t// adjust camera position\n\t\tif ( this.zoomToCursor && this._performCursorZoom ) {\n\n\t\t\tlet newRadius = null;\n\t\t\tif ( this.object.isPerspectiveCamera ) {\n\n\t\t\t\t// move the camera down the pointer ray\n\t\t\t\t// this method avoids floating point error\n\t\t\t\tconst prevRadius = _v.length();\n\t\t\t\tnewRadius = this._clampDistance( prevRadius * this._scale );\n\n\t\t\t\tconst radiusDelta = prevRadius - newRadius;\n\t\t\t\tthis.object.position.addScaledVector( this._dollyDirection, radiusDelta );\n\t\t\t\tthis.object.updateMatrixWorld();\n\n\t\t\t\tzoomChanged = !! radiusDelta;\n\n\t\t\t} else if ( this.object.isOrthographicCamera ) {\n\n\t\t\t\t// adjust the ortho camera position based on zoom changes\n\t\t\t\tconst mouseBefore = new Vector3( this._mouse.x, this._mouse.y, 0 );\n\t\t\t\tmouseBefore.unproject( this.object );\n\n\t\t\t\tconst prevZoom = this.object.zoom;\n\t\t\t\tthis.object.zoom = Math.max( this.minZoom, Math.min( this.maxZoom, this.object.zoom / this._scale ) );\n\t\t\t\tthis.object.updateProjectionMatrix();\n\n\t\t\t\tzoomChanged = prevZoom !== this.object.zoom;\n\n\t\t\t\tconst mouseAfter = new Vector3( this._mouse.x, this._mouse.y, 0 );\n\t\t\t\tmouseAfter.unproject( this.object );\n\n\t\t\t\tthis.object.position.sub( mouseAfter ).add( mouseBefore );\n\t\t\t\tthis.object.updateMatrixWorld();\n\n\t\t\t\tnewRadius = _v.length();\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.' );\n\t\t\t\tthis.zoomToCursor = false;\n\n\t\t\t}\n\n\t\t\t// handle the placement of the target\n\t\t\tif ( newRadius !== null ) {\n\n\t\t\t\tif ( this.screenSpacePanning ) {\n\n\t\t\t\t\t// position the orbit target in front of the new camera position\n\t\t\t\t\tthis.target.set( 0, 0, - 1 )\n\t\t\t\t\t\t.transformDirection( this.object.matrix )\n\t\t\t\t\t\t.multiplyScalar( newRadius )\n\t\t\t\t\t\t.add( this.object.position );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// get the ray and translation plane to compute target\n\t\t\t\t\t_ray.origin.copy( this.object.position );\n\t\t\t\t\t_ray.direction.set( 0, 0, - 1 ).transformDirection( this.object.matrix );\n\n\t\t\t\t\t// if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\n\t\t\t\t\t// extremely large values\n\t\t\t\t\tif ( Math.abs( this.object.up.dot( _ray.direction ) ) < _TILT_LIMIT ) {\n\n\t\t\t\t\t\tthis.object.lookAt( this.target );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_plane.setFromNormalAndCoplanarPoint( this.object.up, this.target );\n\t\t\t\t\t\t_ray.intersectPlane( _plane, this.target );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( this.object.isOrthographicCamera ) {\n\n\t\t\tconst prevZoom = this.object.zoom;\n\t\t\tthis.object.zoom = Math.max( this.minZoom, Math.min( this.maxZoom, this.object.zoom / this._scale ) );\n\n\t\t\tif ( prevZoom !== this.object.zoom ) {\n\n\t\t\t\tthis.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._scale = 1;\n\t\tthis._performCursorZoom = false;\n\n\t\t// update condition is:\n\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\tif ( zoomChanged ||\n\t\t\tthis._lastPosition.distanceToSquared( this.object.position ) > _EPS ||\n\t\t\t8 * ( 1 - this._lastQuaternion.dot( this.object.quaternion ) ) > _EPS ||\n\t\t\tthis._lastTargetPosition.distanceToSquared( this.target ) > _EPS ) {\n\n\t\t\tthis.dispatchEvent( _changeEvent );\n\n\t\t\tthis._lastPosition.copy( this.object.position );\n\t\t\tthis._lastQuaternion.copy( this.object.quaternion );\n\t\t\tthis._lastTargetPosition.copy( this.target );\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\t_getAutoRotationAngle( deltaTime ) {\n\n\t\tif ( deltaTime !== null ) {\n\n\t\t\treturn ( _twoPI / 60 * this.autoRotateSpeed ) * deltaTime;\n\n\t\t} else {\n\n\t\t\treturn _twoPI / 60 / 60 * this.autoRotateSpeed;\n\n\t\t}\n\n\t}\n\n\t_getZoomScale( delta ) {\n\n\t\tconst normalizedDelta = Math.abs( delta * 0.01 );\n\t\treturn Math.pow( 0.95, this.zoomSpeed * normalizedDelta );\n\n\t}\n\n\t_rotateLeft( angle ) {\n\n\t\tthis._sphericalDelta.theta -= angle;\n\n\t}\n\n\t_rotateUp( angle ) {\n\n\t\tthis._sphericalDelta.phi -= angle;\n\n\t}\n\n\t_panLeft( distance, objectMatrix ) {\n\n\t\t_v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t_v.multiplyScalar( - distance );\n\n\t\tthis._panOffset.add( _v );\n\n\t}\n\n\t_panUp( distance, objectMatrix ) {\n\n\t\tif ( this.screenSpacePanning === true ) {\n\n\t\t\t_v.setFromMatrixColumn( objectMatrix, 1 );\n\n\t\t} else {\n\n\t\t\t_v.setFromMatrixColumn( objectMatrix, 0 );\n\t\t\t_v.crossVectors( this.object.up, _v );\n\n\t\t}\n\n\t\t_v.multiplyScalar( distance );\n\n\t\tthis._panOffset.add( _v );\n\n\t}\n\n\t// deltaX and deltaY are in pixels; right and down are positive\n\t_pan( deltaX, deltaY ) {\n\n\t\tconst element = this.domElement;\n\n\t\tif ( this.object.isPerspectiveCamera ) {\n\n\t\t\t// perspective\n\t\t\tconst position = this.object.position;\n\t\t\t_v.copy( position ).sub( this.target );\n\t\t\tlet targetDistance = _v.length();\n\n\t\t\t// half of the fov is center to top of screen\n\t\t\ttargetDistance *= Math.tan( ( this.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t// we use only clientHeight here so aspect ratio does not distort speed\n\t\t\tthis._panLeft( 2 * deltaX * targetDistance / element.clientHeight, this.object.matrix );\n\t\t\tthis._panUp( 2 * deltaY * targetDistance / element.clientHeight, this.object.matrix );\n\n\t\t} else if ( this.object.isOrthographicCamera ) {\n\n\t\t\t// orthographic\n\t\t\tthis._panLeft( deltaX * ( this.object.right - this.object.left ) / this.object.zoom / element.clientWidth, this.object.matrix );\n\t\t\tthis._panUp( deltaY * ( this.object.top - this.object.bottom ) / this.object.zoom / element.clientHeight, this.object.matrix );\n\n\t\t} else {\n\n\t\t\t// camera neither orthographic nor perspective\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\tthis.enablePan = false;\n\n\t\t}\n\n\t}\n\n\t_dollyOut( dollyScale ) {\n\n\t\tif ( this.object.isPerspectiveCamera || this.object.isOrthographicCamera ) {\n\n\t\t\tthis._scale /= dollyScale;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tthis.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\t_dollyIn( dollyScale ) {\n\n\t\tif ( this.object.isPerspectiveCamera || this.object.isOrthographicCamera ) {\n\n\t\t\tthis._scale *= dollyScale;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tthis.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\t_updateZoomParameters( x, y ) {\n\n\t\tif ( ! this.zoomToCursor ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._performCursorZoom = true;\n\n\t\tconst rect = this.domElement.getBoundingClientRect();\n\t\tconst dx = x - rect.left;\n\t\tconst dy = y - rect.top;\n\t\tconst w = rect.width;\n\t\tconst h = rect.height;\n\n\t\tthis._mouse.x = ( dx / w ) * 2 - 1;\n\t\tthis._mouse.y = - ( dy / h ) * 2 + 1;\n\n\t\tthis._dollyDirection.set( this._mouse.x, this._mouse.y, 1 ).unproject( this.object ).sub( this.object.position ).normalize();\n\n\t}\n\n\t_clampDistance( dist ) {\n\n\t\treturn Math.max( this.minDistance, Math.min( this.maxDistance, dist ) );\n\n\t}\n\n\t//\n\t// event callbacks - update the object state\n\t//\n\n\t_handleMouseDownRotate( event ) {\n\n\t\tthis._rotateStart.set( event.clientX, event.clientY );\n\n\t}\n\n\t_handleMouseDownDolly( event ) {\n\n\t\tthis._updateZoomParameters( event.clientX, event.clientX );\n\t\tthis._dollyStart.set( event.clientX, event.clientY );\n\n\t}\n\n\t_handleMouseDownPan( event ) {\n\n\t\tthis._panStart.set( event.clientX, event.clientY );\n\n\t}\n\n\t_handleMouseMoveRotate( event ) {\n\n\t\tthis._rotateEnd.set( event.clientX, event.clientY );\n\n\t\tthis._rotateDelta.subVectors( this._rotateEnd, this._rotateStart ).multiplyScalar( this.rotateSpeed );\n\n\t\tconst element = this.domElement;\n\n\t\tthis._rotateLeft( _twoPI * this._rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\tthis._rotateUp( _twoPI * this._rotateDelta.y / element.clientHeight );\n\n\t\tthis._rotateStart.copy( this._rotateEnd );\n\n\t\tthis.update();\n\n\t}\n\n\t_handleMouseMoveDolly( event ) {\n\n\t\tthis._dollyEnd.set( event.clientX, event.clientY );\n\n\t\tthis._dollyDelta.subVectors( this._dollyEnd, this._dollyStart );\n\n\t\tif ( this._dollyDelta.y > 0 ) {\n\n\t\t\tthis._dollyOut( this._getZoomScale( this._dollyDelta.y ) );\n\n\t\t} else if ( this._dollyDelta.y < 0 ) {\n\n\t\t\tthis._dollyIn( this._getZoomScale( this._dollyDelta.y ) );\n\n\t\t}\n\n\t\tthis._dollyStart.copy( this._dollyEnd );\n\n\t\tthis.update();\n\n\t}\n\n\t_handleMouseMovePan( event ) {\n\n\t\tthis._panEnd.set( event.clientX, event.clientY );\n\n\t\tthis._panDelta.subVectors( this._panEnd, this._panStart ).multiplyScalar( this.panSpeed );\n\n\t\tthis._pan( this._panDelta.x, this._panDelta.y );\n\n\t\tthis._panStart.copy( this._panEnd );\n\n\t\tthis.update();\n\n\t}\n\n\t_handleMouseWheel( event ) {\n\n\t\tthis._updateZoomParameters( event.clientX, event.clientY );\n\n\t\tif ( event.deltaY < 0 ) {\n\n\t\t\tthis._dollyIn( this._getZoomScale( event.deltaY ) );\n\n\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\tthis._dollyOut( this._getZoomScale( event.deltaY ) );\n\n\t\t}\n\n\t\tthis.update();\n\n\t}\n\n\t_handleKeyDown( event ) {\n\n\t\tlet needsUpdate = false;\n\n\t\tswitch ( event.code ) {\n\n\t\t\tcase this.keys.UP:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( this.enableRotate ) {\n\n\t\t\t\t\t\tthis._rotateUp( _twoPI * this.keyRotateSpeed / this.domElement.clientHeight );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( this.enablePan ) {\n\n\t\t\t\t\t\tthis._pan( 0, this.keyPanSpeed );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase this.keys.BOTTOM:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( this.enableRotate ) {\n\n\t\t\t\t\t\tthis._rotateUp( - _twoPI * this.keyRotateSpeed / this.domElement.clientHeight );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( this.enablePan ) {\n\n\t\t\t\t\t\tthis._pan( 0, - this.keyPanSpeed );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase this.keys.LEFT:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( this.enableRotate ) {\n\n\t\t\t\t\t\tthis._rotateLeft( _twoPI * this.keyRotateSpeed / this.domElement.clientHeight );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( this.enablePan ) {\n\n\t\t\t\t\t\tthis._pan( this.keyPanSpeed, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase this.keys.RIGHT:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( this.enableRotate ) {\n\n\t\t\t\t\t\tthis._rotateLeft( - _twoPI * this.keyRotateSpeed / this.domElement.clientHeight );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( this.enablePan ) {\n\n\t\t\t\t\t\tthis._pan( - this.keyPanSpeed, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( needsUpdate ) {\n\n\t\t\t// prevent the browser from scrolling on cursor keys\n\t\t\tevent.preventDefault();\n\n\t\t\tthis.update();\n\n\t\t}\n\n\n\t}\n\n\t_handleTouchStartRotate( event ) {\n\n\t\tif ( this._pointers.length === 1 ) {\n\n\t\t\tthis._rotateStart.set( event.pageX, event.pageY );\n\n\t\t} else {\n\n\t\t\tconst position = this._getSecondPointerPosition( event );\n\n\t\t\tconst x = 0.5 * ( event.pageX + position.x );\n\t\t\tconst y = 0.5 * ( event.pageY + position.y );\n\n\t\t\tthis._rotateStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\t_handleTouchStartPan( event ) {\n\n\t\tif ( this._pointers.length === 1 ) {\n\n\t\t\tthis._panStart.set( event.pageX, event.pageY );\n\n\t\t} else {\n\n\t\t\tconst position = this._getSecondPointerPosition( event );\n\n\t\t\tconst x = 0.5 * ( event.pageX + position.x );\n\t\t\tconst y = 0.5 * ( event.pageY + position.y );\n\n\t\t\tthis._panStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\t_handleTouchStartDolly( event ) {\n\n\t\tconst position = this._getSecondPointerPosition( event );\n\n\t\tconst dx = event.pageX - position.x;\n\t\tconst dy = event.pageY - position.y;\n\n\t\tconst distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tthis._dollyStart.set( 0, distance );\n\n\t}\n\n\t_handleTouchStartDollyPan( event ) {\n\n\t\tif ( this.enableZoom ) this._handleTouchStartDolly( event );\n\n\t\tif ( this.enablePan ) this._handleTouchStartPan( event );\n\n\t}\n\n\t_handleTouchStartDollyRotate( event ) {\n\n\t\tif ( this.enableZoom ) this._handleTouchStartDolly( event );\n\n\t\tif ( this.enableRotate ) this._handleTouchStartRotate( event );\n\n\t}\n\n\t_handleTouchMoveRotate( event ) {\n\n\t\tif ( this._pointers.length == 1 ) {\n\n\t\t\tthis._rotateEnd.set( event.pageX, event.pageY );\n\n\t\t} else {\n\n\t\t\tconst position = this._getSecondPointerPosition( event );\n\n\t\t\tconst x = 0.5 * ( event.pageX + position.x );\n\t\t\tconst y = 0.5 * ( event.pageY + position.y );\n\n\t\t\tthis._rotateEnd.set( x, y );\n\n\t\t}\n\n\t\tthis._rotateDelta.subVectors( this._rotateEnd, this._rotateStart ).multiplyScalar( this.rotateSpeed );\n\n\t\tconst element = this.domElement;\n\n\t\tthis._rotateLeft( _twoPI * this._rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\tthis._rotateUp( _twoPI * this._rotateDelta.y / element.clientHeight );\n\n\t\tthis._rotateStart.copy( this._rotateEnd );\n\n\t}\n\n\t_handleTouchMovePan( event ) {\n\n\t\tif ( this._pointers.length === 1 ) {\n\n\t\t\tthis._panEnd.set( event.pageX, event.pageY );\n\n\t\t} else {\n\n\t\t\tconst position = this._getSecondPointerPosition( event );\n\n\t\t\tconst x = 0.5 * ( event.pageX + position.x );\n\t\t\tconst y = 0.5 * ( event.pageY + position.y );\n\n\t\t\tthis._panEnd.set( x, y );\n\n\t\t}\n\n\t\tthis._panDelta.subVectors( this._panEnd, this._panStart ).multiplyScalar( this.panSpeed );\n\n\t\tthis._pan( this._panDelta.x, this._panDelta.y );\n\n\t\tthis._panStart.copy( this._panEnd );\n\n\t}\n\n\t_handleTouchMoveDolly( event ) {\n\n\t\tconst position = this._getSecondPointerPosition( event );\n\n\t\tconst dx = event.pageX - position.x;\n\t\tconst dy = event.pageY - position.y;\n\n\t\tconst distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tthis._dollyEnd.set( 0, distance );\n\n\t\tthis._dollyDelta.set( 0, Math.pow( this._dollyEnd.y / this._dollyStart.y, this.zoomSpeed ) );\n\n\t\tthis._dollyOut( this._dollyDelta.y );\n\n\t\tthis._dollyStart.copy( this._dollyEnd );\n\n\t\tconst centerX = ( event.pageX + position.x ) * 0.5;\n\t\tconst centerY = ( event.pageY + position.y ) * 0.5;\n\n\t\tthis._updateZoomParameters( centerX, centerY );\n\n\t}\n\n\t_handleTouchMoveDollyPan( event ) {\n\n\t\tif ( this.enableZoom ) this._handleTouchMoveDolly( event );\n\n\t\tif ( this.enablePan ) this._handleTouchMovePan( event );\n\n\t}\n\n\t_handleTouchMoveDollyRotate( event ) {\n\n\t\tif ( this.enableZoom ) this._handleTouchMoveDolly( event );\n\n\t\tif ( this.enableRotate ) this._handleTouchMoveRotate( event );\n\n\t}\n\n\t// pointers\n\n\t_addPointer( event ) {\n\n\t\tthis._pointers.push( event.pointerId );\n\n\t}\n\n\t_removePointer( event ) {\n\n\t\tdelete this._pointerPositions[ event.pointerId ];\n\n\t\tfor ( let i = 0; i < this._pointers.length; i ++ ) {\n\n\t\t\tif ( this._pointers[ i ] == event.pointerId ) {\n\n\t\t\t\tthis._pointers.splice( i, 1 );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_isTrackingPointer( event ) {\n\n\t\tfor ( let i = 0; i < this._pointers.length; i ++ ) {\n\n\t\t\tif ( this._pointers[ i ] == event.pointerId ) return true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\t_trackPointer( event ) {\n\n\t\tlet position = this._pointerPositions[ event.pointerId ];\n\n\t\tif ( position === undefined ) {\n\n\t\t\tposition = new Vector2();\n\t\t\tthis._pointerPositions[ event.pointerId ] = position;\n\n\t\t}\n\n\t\tposition.set( event.pageX, event.pageY );\n\n\t}\n\n\t_getSecondPointerPosition( event ) {\n\n\t\tconst pointerId = ( event.pointerId === this._pointers[ 0 ] ) ? this._pointers[ 1 ] : this._pointers[ 0 ];\n\n\t\treturn this._pointerPositions[ pointerId ];\n\n\t}\n\n\t//\n\n\t_customWheelEvent( event ) {\n\n\t\tconst mode = event.deltaMode;\n\n\t\t// minimal wheel event altered to meet delta-zoom demand\n\t\tconst newEvent = {\n\t\t\tclientX: event.clientX,\n\t\t\tclientY: event.clientY,\n\t\t\tdeltaY: event.deltaY,\n\t\t};\n\n\t\tswitch ( mode ) {\n\n\t\t\tcase 1: // LINE_MODE\n\t\t\t\tnewEvent.deltaY *= 16;\n\t\t\t\tbreak;\n\n\t\t\tcase 2: // PAGE_MODE\n\t\t\t\tnewEvent.deltaY *= 100;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\t// detect if event was triggered by pinching\n\t\tif ( event.ctrlKey && ! this._controlActive ) {\n\n\t\t\tnewEvent.deltaY *= 10;\n\n\t\t}\n\n\t\treturn newEvent;\n\n\t}\n\n}\n\nfunction onPointerDown( event ) {\n\n\tif ( this.enabled === false ) return;\n\n\tif ( this._pointers.length === 0 ) {\n\n\t\tthis.domElement.setPointerCapture( event.pointerId );\n\n\t\tthis.domElement.addEventListener( 'pointermove', this._onPointerMove );\n\t\tthis.domElement.addEventListener( 'pointerup', this._onPointerUp );\n\n\t}\n\n\t//\n\n\tif ( this._isTrackingPointer( event ) ) return;\n\n\t//\n\n\tthis._addPointer( event );\n\n\tif ( event.pointerType === 'touch' ) {\n\n\t\tthis._onTouchStart( event );\n\n\t} else {\n\n\t\tthis._onMouseDown( event );\n\n\t}\n\n}\n\nfunction onPointerMove( event ) {\n\n\tif ( this.enabled === false ) return;\n\n\tif ( event.pointerType === 'touch' ) {\n\n\t\tthis._onTouchMove( event );\n\n\t} else {\n\n\t\tthis._onMouseMove( event );\n\n\t}\n\n}\n\nfunction onPointerUp( event ) {\n\n\tthis._removePointer( event );\n\n\tswitch ( this._pointers.length ) {\n\n\t\tcase 0:\n\n\t\t\tthis.domElement.releasePointerCapture( event.pointerId );\n\n\t\t\tthis.domElement.removeEventListener( 'pointermove', this._onPointerMove );\n\t\t\tthis.domElement.removeEventListener( 'pointerup', this._onPointerUp );\n\n\t\t\tthis.dispatchEvent( _endEvent );\n\n\t\t\tthis.state = _STATE.NONE;\n\n\t\t\tbreak;\n\n\t\tcase 1:\n\n\t\t\tconst pointerId = this._pointers[ 0 ];\n\t\t\tconst position = this._pointerPositions[ pointerId ];\n\n\t\t\t// minimal placeholder event - allows state correction on pointer-up\n\t\t\tthis._onTouchStart( { pointerId: pointerId, pageX: position.x, pageY: position.y } );\n\n\t\t\tbreak;\n\n\t}\n\n}\n\nfunction onMouseDown( event ) {\n\n\tlet mouseAction;\n\n\tswitch ( event.button ) {\n\n\t\tcase 0:\n\n\t\t\tmouseAction = this.mouseButtons.LEFT;\n\t\t\tbreak;\n\n\t\tcase 1:\n\n\t\t\tmouseAction = this.mouseButtons.MIDDLE;\n\t\t\tbreak;\n\n\t\tcase 2:\n\n\t\t\tmouseAction = this.mouseButtons.RIGHT;\n\t\t\tbreak;\n\n\t\tdefault:\n\n\t\t\tmouseAction = - 1;\n\n\t}\n\n\tswitch ( mouseAction ) {\n\n\t\tcase MOUSE.DOLLY:\n\n\t\t\tif ( this.enableZoom === false ) return;\n\n\t\t\tthis._handleMouseDownDolly( event );\n\n\t\t\tthis.state = _STATE.DOLLY;\n\n\t\t\tbreak;\n\n\t\tcase MOUSE.ROTATE:\n\n\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\tif ( this.enablePan === false ) return;\n\n\t\t\t\tthis._handleMouseDownPan( event );\n\n\t\t\t\tthis.state = _STATE.PAN;\n\n\t\t\t} else {\n\n\t\t\t\tif ( this.enableRotate === false ) return;\n\n\t\t\t\tthis._handleMouseDownRotate( event );\n\n\t\t\t\tthis.state = _STATE.ROTATE;\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tcase MOUSE.PAN:\n\n\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\tif ( this.enableRotate === false ) return;\n\n\t\t\t\tthis._handleMouseDownRotate( event );\n\n\t\t\t\tthis.state = _STATE.ROTATE;\n\n\t\t\t} else {\n\n\t\t\t\tif ( this.enablePan === false ) return;\n\n\t\t\t\tthis._handleMouseDownPan( event );\n\n\t\t\t\tthis.state = _STATE.PAN;\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tdefault:\n\n\t\t\tthis.state = _STATE.NONE;\n\n\t}\n\n\tif ( this.state !== _STATE.NONE ) {\n\n\t\tthis.dispatchEvent( _startEvent );\n\n\t}\n\n}\n\nfunction onMouseMove( event ) {\n\n\tswitch ( this.state ) {\n\n\t\tcase _STATE.ROTATE:\n\n\t\t\tif ( this.enableRotate === false ) return;\n\n\t\t\tthis._handleMouseMoveRotate( event );\n\n\t\t\tbreak;\n\n\t\tcase _STATE.DOLLY:\n\n\t\t\tif ( this.enableZoom === false ) return;\n\n\t\t\tthis._handleMouseMoveDolly( event );\n\n\t\t\tbreak;\n\n\t\tcase _STATE.PAN:\n\n\t\t\tif ( this.enablePan === false ) return;\n\n\t\t\tthis._handleMouseMovePan( event );\n\n\t\t\tbreak;\n\n\t}\n\n}\n\nfunction onMouseWheel( event ) {\n\n\tif ( this.enabled === false || this.enableZoom === false || this.state !== _STATE.NONE ) return;\n\n\tevent.preventDefault();\n\n\tthis.dispatchEvent( _startEvent );\n\n\tthis._handleMouseWheel( this._customWheelEvent( event ) );\n\n\tthis.dispatchEvent( _endEvent );\n\n}\n\nfunction onKeyDown( event ) {\n\n\tif ( this.enabled === false ) return;\n\n\tthis._handleKeyDown( event );\n\n}\n\nfunction onTouchStart( event ) {\n\n\tthis._trackPointer( event );\n\n\tswitch ( this._pointers.length ) {\n\n\t\tcase 1:\n\n\t\t\tswitch ( this.touches.ONE ) {\n\n\t\t\t\tcase TOUCH.ROTATE:\n\n\t\t\t\t\tif ( this.enableRotate === false ) return;\n\n\t\t\t\t\tthis._handleTouchStartRotate( event );\n\n\t\t\t\t\tthis.state = _STATE.TOUCH_ROTATE;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase TOUCH.PAN:\n\n\t\t\t\t\tif ( this.enablePan === false ) return;\n\n\t\t\t\t\tthis._handleTouchStartPan( event );\n\n\t\t\t\t\tthis.state = _STATE.TOUCH_PAN;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tthis.state = _STATE.NONE;\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tcase 2:\n\n\t\t\tswitch ( this.touches.TWO ) {\n\n\t\t\t\tcase TOUCH.DOLLY_PAN:\n\n\t\t\t\t\tif ( this.enableZoom === false && this.enablePan === false ) return;\n\n\t\t\t\t\tthis._handleTouchStartDollyPan( event );\n\n\t\t\t\t\tthis.state = _STATE.TOUCH_DOLLY_PAN;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase TOUCH.DOLLY_ROTATE:\n\n\t\t\t\t\tif ( this.enableZoom === false && this.enableRotate === false ) return;\n\n\t\t\t\t\tthis._handleTouchStartDollyRotate( event );\n\n\t\t\t\t\tthis.state = _STATE.TOUCH_DOLLY_ROTATE;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tthis.state = _STATE.NONE;\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tdefault:\n\n\t\t\tthis.state = _STATE.NONE;\n\n\t}\n\n\tif ( this.state !== _STATE.NONE ) {\n\n\t\tthis.dispatchEvent( _startEvent );\n\n\t}\n\n}\n\nfunction onTouchMove( event ) {\n\n\tthis._trackPointer( event );\n\n\tswitch ( this.state ) {\n\n\t\tcase _STATE.TOUCH_ROTATE:\n\n\t\t\tif ( this.enableRotate === false ) return;\n\n\t\t\tthis._handleTouchMoveRotate( event );\n\n\t\t\tthis.update();\n\n\t\t\tbreak;\n\n\t\tcase _STATE.TOUCH_PAN:\n\n\t\t\tif ( this.enablePan === false ) return;\n\n\t\t\tthis._handleTouchMovePan( event );\n\n\t\t\tthis.update();\n\n\t\t\tbreak;\n\n\t\tcase _STATE.TOUCH_DOLLY_PAN:\n\n\t\t\tif ( this.enableZoom === false && this.enablePan === false ) return;\n\n\t\t\tthis._handleTouchMoveDollyPan( event );\n\n\t\t\tthis.update();\n\n\t\t\tbreak;\n\n\t\tcase _STATE.TOUCH_DOLLY_ROTATE:\n\n\t\t\tif ( this.enableZoom === false && this.enableRotate === false ) return;\n\n\t\t\tthis._handleTouchMoveDollyRotate( event );\n\n\t\t\tthis.update();\n\n\t\t\tbreak;\n\n\t\tdefault:\n\n\t\t\tthis.state = _STATE.NONE;\n\n\t}\n\n}\n\nfunction onContextMenu( event ) {\n\n\tif ( this.enabled === false ) return;\n\n\tevent.preventDefault();\n\n}\n\nfunction interceptControlDown( event ) {\n\n\tif ( event.key === 'Control' ) {\n\n\t\tthis._controlActive = true;\n\n\t\tconst document = this.domElement.getRootNode(); // offscreen canvas compatibility\n\n\t\tdocument.addEventListener( 'keyup', this._interceptControlUp, { passive: true, capture: true } );\n\n\t}\n\n}\n\nfunction interceptControlUp( event ) {\n\n\tif ( event.key === 'Control' ) {\n\n\t\tthis._controlActive = false;\n\n\t\tconst document = this.domElement.getRootNode(); // offscreen canvas compatibility\n\n\t\tdocument.removeEventListener( 'keyup', this._interceptControlUp, { passive: true, capture: true } );\n\n\t}\n\n}\n\nexport { OrbitControls };\n", "import { Euler, Object3D, Vector3, Quaternion, Matrix4 } from 'three';\n\nconst _tempAxis = new Vector3();\nconst _tempEuler = new Euler();\nconst _tempTransform = new Matrix4();\nconst _tempOrigTransform = new Matrix4();\nconst _tempQuat = new Quaternion();\nconst _tempScale = new Vector3(1.0, 1.0, 1.0);\nconst _tempPosition = new Vector3();\n\nclass URDFBase extends Object3D {\n\n    constructor(...args) {\n\n        super(...args);\n        this.urdfNode = null;\n        this.urdfName = '';\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfNode = source.urdfNode;\n        this.urdfName = source.urdfName;\n\n        return this;\n\n    }\n\n}\n\nclass URDFCollider extends URDFBase {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFCollider = true;\n        this.type = 'URDFCollider';\n\n    }\n\n}\n\nclass URDFVisual extends URDFBase {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFVisual = true;\n        this.type = 'URDFVisual';\n\n    }\n\n}\n\nclass URDFLink extends URDFBase {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFLink = true;\n        this.type = 'URDFLink';\n\n    }\n\n}\n\nclass URDFJoint extends URDFBase {\n\n    get jointType() {\n\n        return this._jointType;\n\n    }\n\n    set jointType(v) {\n\n        if (this.jointType === v) return;\n        this._jointType = v;\n        this.matrixWorldNeedsUpdate = true;\n        switch (v) {\n\n            case 'fixed':\n                this.jointValue = [];\n                break;\n\n            case 'continuous':\n            case 'revolute':\n            case 'prismatic':\n                this.jointValue = new Array(1).fill(0);\n                break;\n\n            case 'planar':\n                // Planar joints are, 3dof: position XY and rotation Z.\n                this.jointValue = new Array(3).fill(0);\n                this.axis = new Vector3(0, 0, 1);\n                break;\n\n            case 'floating':\n                this.jointValue = new Array(6).fill(0);\n                break;\n\n        }\n\n    }\n\n    get angle() {\n\n        return this.jointValue[0];\n\n    }\n\n    constructor(...args) {\n\n        super(...args);\n\n        this.isURDFJoint = true;\n        this.type = 'URDFJoint';\n\n        this.jointValue = null;\n        this.jointType = 'fixed';\n        this.axis = new Vector3(1, 0, 0);\n        this.limit = { lower: 0, upper: 0 };\n        this.ignoreLimits = false;\n\n        this.origPosition = null;\n        this.origQuaternion = null;\n\n        this.mimicJoints = [];\n\n    }\n\n    /* Overrides */\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.jointType = source.jointType;\n        this.axis = source.axis.clone();\n        this.limit.lower = source.limit.lower;\n        this.limit.upper = source.limit.upper;\n        this.ignoreLimits = false;\n\n        this.jointValue = [...source.jointValue];\n\n        this.origPosition = source.origPosition ? source.origPosition.clone() : null;\n        this.origQuaternion = source.origQuaternion ? source.origQuaternion.clone() : null;\n\n        this.mimicJoints = [...source.mimicJoints];\n\n        return this;\n\n    }\n\n    /* Public Functions */\n    /**\n     * @param {...number|null} values The joint value components to set, optionally null for no-op\n     * @returns {boolean} Whether the invocation of this function resulted in an actual change to the joint value\n     */\n    setJointValue(...values) {\n\n        // Parse all incoming values into numbers except null, which we treat as a no-op for that value component.\n        values = values.map(v => v === null ? null : parseFloat(v));\n\n        if (!this.origPosition || !this.origQuaternion) {\n\n            this.origPosition = this.position.clone();\n            this.origQuaternion = this.quaternion.clone();\n\n        }\n\n        let didUpdate = false;\n\n        this.mimicJoints.forEach(joint => {\n\n            didUpdate = joint.updateFromMimickedJoint(...values) || didUpdate;\n\n        });\n\n        switch (this.jointType) {\n\n            case 'fixed': {\n\n                return didUpdate;\n\n            }\n            case 'continuous':\n            case 'revolute': {\n\n                let angle = values[0];\n                if (angle == null) return didUpdate;\n                if (angle === this.jointValue[0]) return didUpdate;\n\n                if (!this.ignoreLimits && this.jointType === 'revolute') {\n\n                    angle = Math.min(this.limit.upper, angle);\n                    angle = Math.max(this.limit.lower, angle);\n\n                }\n\n                this.quaternion\n                    .setFromAxisAngle(this.axis, angle)\n                    .premultiply(this.origQuaternion);\n\n                if (this.jointValue[0] !== angle) {\n\n                    this.jointValue[0] = angle;\n                    this.matrixWorldNeedsUpdate = true;\n                    return true;\n\n                } else {\n\n                    return didUpdate;\n\n                }\n\n            }\n\n            case 'prismatic': {\n\n                let pos = values[0];\n                if (pos == null) return didUpdate;\n                if (pos === this.jointValue[0]) return didUpdate;\n\n                if (!this.ignoreLimits) {\n\n                    pos = Math.min(this.limit.upper, pos);\n                    pos = Math.max(this.limit.lower, pos);\n\n                }\n\n                this.position.copy(this.origPosition);\n                _tempAxis.copy(this.axis).applyEuler(this.rotation);\n                this.position.addScaledVector(_tempAxis, pos);\n\n                if (this.jointValue[0] !== pos) {\n\n                    this.jointValue[0] = pos;\n                    this.matrixWorldNeedsUpdate = true;\n                    return true;\n\n                } else {\n\n                    return didUpdate;\n\n                }\n\n            }\n\n            case 'floating': {\n\n                // no-op if all values are identical to existing value or are null\n                if (this.jointValue.every((value, index) => values[index] === value || values[index] === null)) return didUpdate;\n                // Floating joints have six degrees of freedom: X, Y, Z, R, P, Y.\n                this.jointValue[0] = values[0] !== null ? values[0] : this.jointValue[0];\n                this.jointValue[1] = values[1] !== null ? values[1] : this.jointValue[1];\n                this.jointValue[2] = values[2] !== null ? values[2] : this.jointValue[2];\n                this.jointValue[3] = values[3] !== null ? values[3] : this.jointValue[3];\n                this.jointValue[4] = values[4] !== null ? values[4] : this.jointValue[4];\n                this.jointValue[5] = values[5] !== null ? values[5] : this.jointValue[5];\n\n                // Compose transform of joint origin and transform due to joint values\n                _tempOrigTransform.compose(this.origPosition, this.origQuaternion, _tempScale);\n                _tempQuat.setFromEuler(\n                    _tempEuler.set(\n                        this.jointValue[3],\n                        this.jointValue[4],\n                        this.jointValue[5],\n                        'XYZ',\n                    ),\n                );\n                _tempPosition.set(this.jointValue[0], this.jointValue[1], this.jointValue[2]);\n                _tempTransform.compose(_tempPosition, _tempQuat, _tempScale);\n\n                // Calcualte new transform\n                _tempOrigTransform.premultiply(_tempTransform);\n                this.position.setFromMatrixPosition(_tempOrigTransform);\n                this.rotation.setFromRotationMatrix(_tempOrigTransform);\n\n                this.matrixWorldNeedsUpdate = true;\n                return true;\n            }\n\n            case 'planar': {\n\n                // no-op if all values are identical to existing value or are null\n                if (this.jointValue.every((value, index) => values[index] === value || values[index] === null)) return didUpdate;\n\n                this.jointValue[0] = values[0] !== null ? values[0] : this.jointValue[0];\n                this.jointValue[1] = values[1] !== null ? values[1] : this.jointValue[1];\n                this.jointValue[2] = values[2] !== null ? values[2] : this.jointValue[2];\n\n                // Compose transform of joint origin and transform due to joint values\n                _tempOrigTransform.compose(this.origPosition, this.origQuaternion, _tempScale);\n                _tempQuat.setFromAxisAngle(this.axis, this.jointValue[2]);\n                _tempPosition.set(this.jointValue[0], this.jointValue[1], 0.0);\n                _tempTransform.compose(_tempPosition, _tempQuat, _tempScale);\n\n                // Calculate new transform\n                _tempOrigTransform.premultiply(_tempTransform);\n                this.position.setFromMatrixPosition(_tempOrigTransform);\n                this.rotation.setFromRotationMatrix(_tempOrigTransform);\n\n                this.matrixWorldNeedsUpdate = true;\n                return true;\n            }\n\n        }\n\n        return didUpdate;\n\n    }\n\n}\n\nclass URDFMimicJoint extends URDFJoint {\n\n    constructor(...args) {\n\n        super(...args);\n        this.type = 'URDFMimicJoint';\n        this.mimicJoint = null;\n        this.offset = 0;\n        this.multiplier = 1;\n\n    }\n\n    updateFromMimickedJoint(...values) {\n\n        const modifiedValues = values.map(x => x * this.multiplier + this.offset);\n        return super.setJointValue(...modifiedValues);\n\n    }\n\n    /* Overrides */\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.mimicJoint = source.mimicJoint;\n        this.offset = source.offset;\n        this.multiplier = source.multiplier;\n\n        return this;\n\n    }\n\n}\n\nclass URDFRobot extends URDFLink {\n\n    constructor(...args) {\n\n        super(...args);\n        this.isURDFRobot = true;\n        this.urdfNode = null;\n\n        this.urdfRobotNode = null;\n        this.robotName = null;\n\n        this.links = null;\n        this.joints = null;\n        this.colliders = null;\n        this.visual = null;\n        this.frames = null;\n\n    }\n\n    copy(source, recursive) {\n\n        super.copy(source, recursive);\n\n        this.urdfRobotNode = source.urdfRobotNode;\n        this.robotName = source.robotName;\n\n        this.links = {};\n        this.joints = {};\n        this.colliders = {};\n        this.visual = {};\n\n        this.traverse(c => {\n\n            if (c.isURDFJoint && c.urdfName in source.joints) {\n\n                this.joints[c.urdfName] = c;\n\n            }\n\n            if (c.isURDFLink && c.urdfName in source.links) {\n\n                this.links[c.urdfName] = c;\n\n            }\n\n            if (c.isURDFCollider && c.urdfName in source.colliders) {\n\n                this.colliders[c.urdfName] = c;\n\n            }\n\n            if (c.isURDFVisual && c.urdfName in source.visual) {\n\n                this.visual[c.urdfName] = c;\n\n            }\n\n        });\n\n        // Repair mimic joint references once we've re-accumulated all our joint data\n        for (const joint in this.joints) {\n            this.joints[joint].mimicJoints = this.joints[joint].mimicJoints.map((mimicJoint) => this.joints[mimicJoint.name]);\n        }\n\n        this.frames = {\n            ...this.colliders,\n            ...this.visual,\n            ...this.links,\n            ...this.joints,\n        };\n\n        return this;\n\n    }\n\n    getFrame(name) {\n\n        return this.frames[name];\n\n    }\n\n    setJointValue(jointName, ...angle) {\n\n        const joint = this.joints[jointName];\n        if (joint) {\n\n            return joint.setJointValue(...angle);\n\n        }\n\n        return false;\n    }\n\n    setJointValues(values) {\n\n        let didChange = false;\n        for (const name in values) {\n\n            const value = values[name];\n            if (Array.isArray(value)) {\n\n                didChange = this.setJointValue(name, ...value) || didChange;\n\n            } else {\n\n                didChange = this.setJointValue(name, value) || didChange;\n\n            }\n\n        }\n\n        return didChange;\n\n    }\n\n}\n\nexport { URDFRobot, URDFLink, URDFJoint, URDFMimicJoint, URDFVisual, URDFCollider };\n", "import * as THREE from 'three';\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader.js';\nimport { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader.js';\nimport { URDFRobot, URDFJoint, URDFLink, URDFCollider, URDFVisual, URDFMimicJoint } from './URDFClasses.js';\n\n/*\nReference coordinate frames for THREE.js and ROS.\nBoth coordinate systems are right handed so the URDF is instantiated without\nframe transforms. The resulting model can be rotated to rectify the proper up,\nright, and forward directions\n\nTHREE.js\n   Y\n   |\n   |\n   .-----X\n ／\nZ\n\nROS URDf\n       Z\n       |   X\n       | ／\n Y-----.\n\n*/\n\nconst tempQuaternion = new THREE.Quaternion();\nconst tempEuler = new THREE.Euler();\n\n// take a vector \"x y z\" and process it into\n// an array [x, y, z]\nfunction processTuple(val) {\n\n    if (!val) return [0, 0, 0];\n    return val.trim().split(/\\s+/g).map(num => parseFloat(num));\n\n}\n\n// applies a rotation a threejs object in URDF order\nfunction applyRotation(obj, rpy, additive = false) {\n\n    // if additive is true the rotation is applied in\n    // addition to the existing rotation\n    if (!additive) obj.rotation.set(0, 0, 0);\n\n    tempEuler.set(rpy[0], rpy[1], rpy[2], 'ZYX');\n    tempQuaternion.setFromEuler(tempEuler);\n    tempQuaternion.multiply(obj.quaternion);\n    obj.quaternion.copy(tempQuaternion);\n\n}\n\n/* URDFLoader Class */\n// Loads and reads a URDF file into a THREEjs Object3D format\nexport default\nclass URDFLoader {\n\n    constructor(manager) {\n\n        this.manager = manager || THREE.DefaultLoadingManager;\n        this.loadMeshCb = this.defaultMeshLoader.bind(this);\n        this.parseVisual = true;\n        this.parseCollision = false;\n        this.packages = '';\n        this.workingPath = '';\n        this.fetchOptions = {};\n\n    }\n\n    /* Public API */\n    loadAsync(urdf) {\n\n        return new Promise((resolve, reject) => {\n\n            this.load(urdf, resolve, null, reject);\n\n        });\n\n    }\n\n    // urdf:    The path to the URDF within the package OR absolute\n    // onComplete:      Callback that is passed the model once loaded\n    load(urdf, onComplete, onProgress, onError) {\n\n        // Check if a full URI is specified before\n        // prepending the package info\n        const manager = this.manager;\n        const workingPath = THREE.LoaderUtils.extractUrlBase(urdf);\n        const urdfPath = this.manager.resolveURL(urdf);\n\n        manager.itemStart(urdfPath);\n\n        fetch(urdfPath, this.fetchOptions)\n            .then(res => {\n\n                if (res.ok) {\n\n                    if (onProgress) {\n\n                        onProgress(null);\n\n                    }\n                    return res.text();\n\n                } else {\n\n                    throw new Error(`URDFLoader: Failed to load url '${ urdfPath }' with error code ${ res.status } : ${ res.statusText }.`);\n\n                }\n\n            })\n            .then(data => {\n\n                const model = this.parse(data, this.workingPath || workingPath);\n                onComplete(model);\n                manager.itemEnd(urdfPath);\n\n            })\n            .catch(e => {\n\n                if (onError) {\n\n                    onError(e);\n\n                } else {\n\n                    console.error('URDFLoader: Error loading file.', e);\n\n                }\n                manager.itemError(urdfPath);\n                manager.itemEnd(urdfPath);\n\n            });\n\n    }\n\n    parse(content, workingPath = this.workingPath) {\n\n        const packages = this.packages;\n        const loadMeshCb = this.loadMeshCb;\n        const parseVisual = this.parseVisual;\n        const parseCollision = this.parseCollision;\n        const manager = this.manager;\n        const linkMap = {};\n        const jointMap = {};\n        const materialMap = {};\n\n        // Resolves the path of mesh files\n        function resolvePath(path) {\n\n            if (!/^package:\\/\\//.test(path)) {\n\n                return workingPath ? workingPath + path : path;\n\n            }\n\n            // Remove \"package://\" keyword and split meshPath at the first slash\n            const [targetPkg, relPath] = path.replace(/^package:\\/\\//, '').split(/\\/(.+)/);\n\n            if (typeof packages === 'string') {\n\n                // \"pkg\" is one single package\n                if (packages.endsWith(targetPkg)) {\n\n                    // \"pkg\" is the target package\n                    return packages + '/' + relPath;\n\n                } else {\n\n                    // Assume \"pkg\" is the target package's parent directory\n                    return packages + '/' + targetPkg + '/' + relPath;\n\n                }\n\n            } else if (packages instanceof Function) {\n\n                return packages(targetPkg) + '/' + relPath;\n\n            } else if (typeof packages === 'object') {\n\n                // \"pkg\" is a map of packages\n                if (targetPkg in packages) {\n\n                    return packages[targetPkg] + '/' + relPath;\n\n                } else {\n\n                    console.error(`URDFLoader : ${ targetPkg } not found in provided package list.`);\n                    return null;\n\n                }\n\n            }\n\n        }\n\n        // Process the URDF text format\n        function processUrdf(data) {\n\n            let children;\n            if (data instanceof Document) {\n\n                children = [ ...data.children ];\n\n            } else if (data instanceof Element) {\n\n                children = [ data ];\n\n            } else {\n\n                const parser = new DOMParser();\n                const urdf = parser.parseFromString(data, 'text/xml');\n                children = [ ...urdf.children ];\n\n            }\n\n            const robotNode = children.filter(c => c.nodeName === 'robot').pop();\n            return processRobot(robotNode);\n\n        }\n\n        // Process the <robot> node\n        function processRobot(robot) {\n\n            const robotNodes = [ ...robot.children ];\n            const links = robotNodes.filter(c => c.nodeName.toLowerCase() === 'link');\n            const joints = robotNodes.filter(c => c.nodeName.toLowerCase() === 'joint');\n            const materials = robotNodes.filter(c => c.nodeName.toLowerCase() === 'material');\n            const obj = new URDFRobot();\n\n            obj.robotName = robot.getAttribute('name');\n            obj.urdfRobotNode = robot;\n\n            // Create the <material> map\n            materials.forEach(m => {\n\n                const name = m.getAttribute('name');\n                materialMap[name] = processMaterial(m);\n\n            });\n\n            // Create the <link> map\n            const visualMap = {};\n            const colliderMap = {};\n            links.forEach(l => {\n\n                const name = l.getAttribute('name');\n                const isRoot = robot.querySelector(`child[link=\"${ name }\"]`) === null;\n                linkMap[name] = processLink(l, visualMap, colliderMap, isRoot ? obj : null);\n\n            });\n\n            // Create the <joint> map\n            joints.forEach(j => {\n\n                const name = j.getAttribute('name');\n                jointMap[name] = processJoint(j);\n\n            });\n\n            obj.joints = jointMap;\n            obj.links = linkMap;\n            obj.colliders = colliderMap;\n            obj.visual = visualMap;\n\n            // Link up mimic joints\n            const jointList = Object.values(jointMap);\n            jointList.forEach(j => {\n\n                if (j instanceof URDFMimicJoint) {\n\n                    jointMap[j.mimicJoint].mimicJoints.push(j);\n\n                }\n\n            });\n\n            // Detect infinite loops of mimic joints\n            jointList.forEach(j => {\n\n                const uniqueJoints = new Set();\n                const iterFunction = joint => {\n\n                    if (uniqueJoints.has(joint)) {\n\n                        throw new Error('URDFLoader: Detected an infinite loop of mimic joints.');\n\n                    }\n\n                    uniqueJoints.add(joint);\n                    joint.mimicJoints.forEach(j => {\n\n                        iterFunction(j);\n\n                    });\n\n                };\n\n                iterFunction(j);\n            });\n\n            obj.frames = {\n                ...colliderMap,\n                ...visualMap,\n                ...linkMap,\n                ...jointMap,\n            };\n\n            return obj;\n\n        }\n\n        // Process joint nodes and parent them\n        function processJoint(joint) {\n\n            const children = [ ...joint.children ];\n            const jointType = joint.getAttribute('type');\n\n            let obj;\n\n            const mimicTag = children.find(n => n.nodeName.toLowerCase() === 'mimic');\n            if (mimicTag) {\n\n                obj = new URDFMimicJoint();\n                obj.mimicJoint = mimicTag.getAttribute('joint');\n                obj.multiplier = parseFloat(mimicTag.getAttribute('multiplier') || 1.0);\n                obj.offset = parseFloat(mimicTag.getAttribute('offset') || 0.0);\n\n            } else {\n\n                obj = new URDFJoint();\n\n            }\n\n            obj.urdfNode = joint;\n            obj.name = joint.getAttribute('name');\n            obj.urdfName = obj.name;\n            obj.jointType = jointType;\n\n            let parent = null;\n            let child = null;\n            let xyz = [0, 0, 0];\n            let rpy = [0, 0, 0];\n\n            // Extract the attributes\n            children.forEach(n => {\n\n                const type = n.nodeName.toLowerCase();\n                if (type === 'origin') {\n\n                    xyz = processTuple(n.getAttribute('xyz'));\n                    rpy = processTuple(n.getAttribute('rpy'));\n\n                } else if (type === 'child') {\n\n                    child = linkMap[n.getAttribute('link')];\n\n                } else if (type === 'parent') {\n\n                    parent = linkMap[n.getAttribute('link')];\n\n                } else if (type === 'limit') {\n\n                    obj.limit.lower = parseFloat(n.getAttribute('lower') || obj.limit.lower);\n                    obj.limit.upper = parseFloat(n.getAttribute('upper') || obj.limit.upper);\n\n                }\n            });\n\n            // Join the links\n            parent.add(obj);\n            obj.add(child);\n            applyRotation(obj, rpy);\n            obj.position.set(xyz[0], xyz[1], xyz[2]);\n\n            // Set up the rotate function\n            const axisNode = children.filter(n => n.nodeName.toLowerCase() === 'axis')[0];\n\n            if (axisNode) {\n\n                const axisXYZ = axisNode.getAttribute('xyz').split(/\\s+/g).map(num => parseFloat(num));\n                obj.axis = new THREE.Vector3(axisXYZ[0], axisXYZ[1], axisXYZ[2]);\n                obj.axis.normalize();\n\n            }\n\n            return obj;\n\n        }\n\n        // Process the <link> nodes\n        function processLink(link, visualMap, colliderMap, target = null) {\n\n            if (target === null) {\n\n                target = new URDFLink();\n\n            }\n\n            const children = [ ...link.children ];\n            target.name = link.getAttribute('name');\n            target.urdfName = target.name;\n            target.urdfNode = link;\n\n            if (parseVisual) {\n\n                const visualNodes = children.filter(n => n.nodeName.toLowerCase() === 'visual');\n                visualNodes.forEach(vn => {\n\n                    const v = processLinkElement(vn, materialMap);\n                    target.add(v);\n\n                    if (vn.hasAttribute('name')) {\n\n                        const name = vn.getAttribute('name');\n                        v.name = name;\n                        v.urdfName = name;\n                        visualMap[name] = v;\n\n                    }\n\n                });\n\n            }\n\n            if (parseCollision) {\n\n                const collisionNodes = children.filter(n => n.nodeName.toLowerCase() === 'collision');\n                collisionNodes.forEach(cn => {\n\n                    const c = processLinkElement(cn);\n                    target.add(c);\n\n                    if (cn.hasAttribute('name')) {\n\n                        const name = cn.getAttribute('name');\n                        c.name = name;\n                        c.urdfName = name;\n                        colliderMap[name] = c;\n\n                    }\n\n                });\n\n            }\n\n            return target;\n\n        }\n\n        function processMaterial(node) {\n\n            const matNodes = [ ...node.children ];\n            const material = new THREE.MeshPhongMaterial();\n\n            material.name = node.getAttribute('name') || '';\n            matNodes.forEach(n => {\n\n                const type = n.nodeName.toLowerCase();\n                if (type === 'color') {\n\n                    const rgba =\n                        n\n                            .getAttribute('rgba')\n                            .split(/\\s/g)\n                            .map(v => parseFloat(v));\n\n                    material.color.setRGB(rgba[0], rgba[1], rgba[2]);\n                    material.opacity = rgba[3];\n                    material.transparent = rgba[3] < 1;\n                    material.depthWrite = !material.transparent;\n\n                } else if (type === 'texture') {\n\n                    // The URDF spec does not require that the <texture/> tag include\n                    // a filename attribute so skip loading the texture if not provided.\n                    const filename = n.getAttribute('filename');\n                    if (filename) {\n\n                        const loader = new THREE.TextureLoader(manager);\n                        const filePath = resolvePath(filename);\n                        material.map = loader.load(filePath);\n                        material.map.colorSpace = THREE.SRGBColorSpace;\n\n                    }\n\n                }\n            });\n\n            return material;\n\n        }\n\n        // Process the visual and collision nodes into meshes\n        function processLinkElement(vn, materialMap = {}) {\n\n            const isCollisionNode = vn.nodeName.toLowerCase() === 'collision';\n            const children = [ ...vn.children ];\n            let material = null;\n\n            // get the material first\n            const materialNode = children.filter(n => n.nodeName.toLowerCase() === 'material')[0];\n            if (materialNode) {\n\n                const name = materialNode.getAttribute('name');\n                if (name && name in materialMap) {\n\n                    material = materialMap[name];\n\n                } else {\n\n                    material = processMaterial(materialNode);\n\n                }\n\n            } else {\n\n                material = new THREE.MeshPhongMaterial();\n\n            }\n\n            const group = isCollisionNode ? new URDFCollider() : new URDFVisual();\n            group.urdfNode = vn;\n\n            children.forEach(n => {\n\n                const type = n.nodeName.toLowerCase();\n                if (type === 'geometry') {\n\n                    const geoType = n.children[0].nodeName.toLowerCase();\n                    if (geoType === 'mesh') {\n\n                        const filename = n.children[0].getAttribute('filename');\n                        const filePath = resolvePath(filename);\n\n                        // file path is null if a package directory is not provided.\n                        if (filePath !== null) {\n\n                            const scaleAttr = n.children[0].getAttribute('scale');\n                            if (scaleAttr) {\n\n                                const scale = processTuple(scaleAttr);\n                                group.scale.set(scale[0], scale[1], scale[2]);\n\n                            }\n\n                            loadMeshCb(filePath, manager, (obj, err) => {\n\n                                if (err) {\n\n                                    console.error('URDFLoader: Error loading mesh.', err);\n\n                                } else if (obj) {\n\n                                    if (obj instanceof THREE.Mesh) {\n\n                                        obj.material = material;\n\n                                    }\n\n                                    // We don't expect non identity rotations or positions. In the case of\n                                    // COLLADA files the model might come in with a custom scale for unit\n                                    // conversion.\n                                    obj.position.set(0, 0, 0);\n                                    obj.quaternion.identity();\n                                    group.add(obj);\n\n                                }\n\n                            });\n\n                        }\n\n                    } else if (geoType === 'box') {\n\n                        const primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.BoxGeometry(1, 1, 1);\n                        primitiveModel.material = material;\n\n                        const size = processTuple(n.children[0].getAttribute('size'));\n                        primitiveModel.scale.set(size[0], size[1], size[2]);\n\n                        group.add(primitiveModel);\n\n                    } else if (geoType === 'sphere') {\n\n                        const primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.SphereGeometry(1, 30, 30);\n                        primitiveModel.material = material;\n\n                        const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\n                        primitiveModel.scale.set(radius, radius, radius);\n\n                        group.add(primitiveModel);\n\n                    } else if (geoType === 'cylinder') {\n\n                        const primitiveModel = new THREE.Mesh();\n                        primitiveModel.geometry = new THREE.CylinderGeometry(1, 1, 1, 30);\n                        primitiveModel.material = material;\n\n                        const radius = parseFloat(n.children[0].getAttribute('radius')) || 0;\n                        const length = parseFloat(n.children[0].getAttribute('length')) || 0;\n                        primitiveModel.scale.set(radius, length, radius);\n                        primitiveModel.rotation.set(Math.PI / 2, 0, 0);\n\n                        group.add(primitiveModel);\n\n                    }\n\n                } else if (type === 'origin') {\n\n                    const xyz = processTuple(n.getAttribute('xyz'));\n                    const rpy = processTuple(n.getAttribute('rpy'));\n\n                    group.position.set(xyz[0], xyz[1], xyz[2]);\n                    group.rotation.set(0, 0, 0);\n                    applyRotation(group, rpy);\n\n                }\n\n            });\n\n            return group;\n\n        }\n\n        return processUrdf(content);\n\n    }\n\n    // Default mesh loading function\n    defaultMeshLoader(path, manager, done) {\n\n        if (/\\.stl$/i.test(path)) {\n\n            const loader = new STLLoader(manager);\n            loader.load(path, geom => {\n                const mesh = new THREE.Mesh(geom, new THREE.MeshPhongMaterial());\n                done(mesh);\n            });\n\n        } else if (/\\.dae$/i.test(path)) {\n\n            const loader = new ColladaLoader(manager);\n            loader.load(path, dae => done(dae.scene));\n\n        } else {\n\n            console.warn(`URDFLoader: Could not load model at ${ path }.\\nNo loader available`);\n\n        }\n\n    }\n\n};\n", "import * as THREE from 'three';\nimport { MeshPhongMaterial } from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport URDFLoader from './URDFLoader.js';\n\nconst tempVec2 = new THREE.Vector2();\nconst emptyRaycast = () => {};\n\n// urdf-viewer element\n// Loads and displays a 3D view of a URDF-formatted robot\n\n// Events\n// urdf-change: Fires when the URDF has finished loading and getting processed\n// urdf-processed: Fires when the URDF has finished loading and getting processed\n// geometry-loaded: Fires when all the geometry has been fully loaded\n// ignore-limits-change: Fires when the 'ignore-limits' attribute changes\n// angle-change: Fires when an angle changes\nexport default\nclass URDFViewer extends HTMLElement {\n\n    static get observedAttributes() {\n\n        return ['package', 'urdf', 'up', 'display-shadow', 'ambient-color', 'ignore-limits', 'show-collision'];\n\n    }\n\n    get package() { return this.getAttribute('package') || ''; }\n    set package(val) { this.setAttribute('package', val); }\n\n    get urdf() { return this.getAttribute('urdf') || ''; }\n    set urdf(val) { this.setAttribute('urdf', val); }\n\n    get ignoreLimits() { return this.hasAttribute('ignore-limits') || false; }\n    set ignoreLimits(val) { val ? this.setAttribute('ignore-limits', val) : this.removeAttribute('ignore-limits'); }\n\n    get up() { return this.getAttribute('up') || '+Z'; }\n    set up(val) { this.setAttribute('up', val); }\n\n    get displayShadow() { return this.hasAttribute('display-shadow') || false; }\n    set displayShadow(val) { val ? this.setAttribute('display-shadow', '') : this.removeAttribute('display-shadow'); }\n\n    get ambientColor() { return this.getAttribute('ambient-color') || '#8ea0a8'; }\n    set ambientColor(val) { val ? this.setAttribute('ambient-color', val) : this.removeAttribute('ambient-color'); }\n\n    get autoRedraw() { return this.hasAttribute('auto-redraw') || false; }\n    set autoRedraw(val) { val ? this.setAttribute('auto-redraw', true) : this.removeAttribute('auto-redraw'); }\n\n    get noAutoRecenter() { return this.hasAttribute('no-auto-recenter') || false; }\n    set noAutoRecenter(val) { val ? this.setAttribute('no-auto-recenter', true) : this.removeAttribute('no-auto-recenter'); }\n\n    get showCollision() { return this.hasAttribute('show-collision') || false; }\n    set showCollision(val) { val ? this.setAttribute('show-collision', true) : this.removeAttribute('show-collision'); }\n\n    get jointValues() {\n\n        const values = {};\n        if (this.robot) {\n\n            for (const name in this.robot.joints) {\n\n                const joint = this.robot.joints[name];\n                values[name] = joint.jointValue.length === 1 ? joint.angle : [...joint.jointValue];\n\n            }\n\n        }\n\n        return values;\n\n    }\n    set jointValues(val) { this.setJointValues(val); }\n\n    get angles() {\n\n        return this.jointValues;\n\n    }\n    set angles(v) {\n\n        this.jointValues = v;\n\n    }\n\n    /* Lifecycle Functions */\n    constructor() {\n\n        super();\n\n        this._requestId = 0;\n        this._dirty = false;\n        this._loadScheduled = false;\n        this.robot = null;\n        this.loadMeshFunc = null;\n        this.urlModifierFunc = null;\n\n        // Scene setup\n        const scene = new THREE.Scene();\n\n        const ambientLight = new THREE.HemisphereLight(this.ambientColor, '#000');\n        ambientLight.groundColor.lerp(ambientLight.color, 0.5 * Math.PI);\n        ambientLight.intensity = 0.5;\n        ambientLight.position.set(0, 1, 0);\n        scene.add(ambientLight);\n\n        // Light setup\n        const dirLight = new THREE.DirectionalLight(0xffffff, Math.PI);\n        dirLight.position.set(4, 10, 1);\n        dirLight.shadow.mapSize.width = 2048;\n        dirLight.shadow.mapSize.height = 2048;\n        dirLight.shadow.normalBias = 0.001;\n        dirLight.castShadow = true;\n        scene.add(dirLight);\n        scene.add(dirLight.target);\n\n        // Renderer setup\n        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n        renderer.setClearColor(0xffffff);\n        renderer.setClearAlpha(0);\n        renderer.shadowMap.enabled = true;\n        renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n        renderer.outputColorSpace = THREE.SRGBColorSpace;\n\n        // Camera setup\n        const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\n        camera.position.z = -10;\n\n        // World setup\n        const world = new THREE.Object3D();\n        scene.add(world);\n\n        const plane = new THREE.Mesh(\n            new THREE.PlaneGeometry(40, 40),\n            new THREE.ShadowMaterial({ side: THREE.DoubleSide, transparent: true, opacity: 0.25 }),\n        );\n        plane.rotation.x = -Math.PI / 2;\n        plane.position.y = -0.5;\n        plane.receiveShadow = true;\n        plane.scale.set(10, 10, 10);\n        scene.add(plane);\n\n        // Controls setup\n        const controls = new OrbitControls(camera, renderer.domElement);\n        controls.rotateSpeed = 2.0;\n        controls.zoomSpeed = 5;\n        controls.panSpeed = 2;\n        controls.enableZoom = true;\n        controls.enableDamping = false;\n        controls.maxDistance = 50;\n        controls.minDistance = 0.25;\n        controls.addEventListener('change', () => this.recenter());\n\n        this.scene = scene;\n        this.world = world;\n        this.renderer = renderer;\n        this.camera = camera;\n        this.controls = controls;\n        this.plane = plane;\n        this.directionalLight = dirLight;\n        this.ambientLight = ambientLight;\n\n        this._setUp(this.up);\n\n        this._collisionMaterial = new MeshPhongMaterial({\n            transparent: true,\n            opacity: 0.35,\n            shininess: 2.5,\n            premultipliedAlpha: true,\n            color: 0xffbe38,\n            polygonOffset: true,\n            polygonOffsetFactor: -1,\n            polygonOffsetUnits: -1,\n        });\n\n        const _renderLoop = () => {\n\n            if (this.parentNode) {\n\n                this.updateSize();\n\n                if (this._dirty || this.autoRedraw) {\n\n                    if (!this.noAutoRecenter) {\n\n                        this._updateEnvironment();\n                    }\n\n                    this.renderer.render(scene, camera);\n                    this._dirty = false;\n\n                }\n\n                // update controls after the environment in\n                // case the controls are retargeted\n                this.controls.update();\n\n            }\n            this._renderLoopId = requestAnimationFrame(_renderLoop);\n\n        };\n        _renderLoop();\n\n    }\n\n    connectedCallback() {\n\n        // Add our initialize styles for the element if they haven't\n        // been added yet\n        if (!this.constructor._styletag) {\n\n            const styletag = document.createElement('style');\n            styletag.innerHTML =\n            `\n                ${ this.tagName } { display: block; }\n                ${ this.tagName } canvas {\n                    width: 100%;\n                    height: 100%;\n                }\n            `;\n            document.head.appendChild(styletag);\n            this.constructor._styletag = styletag;\n\n        }\n\n        // add the renderer\n        if (this.childElementCount === 0) {\n\n            this.appendChild(this.renderer.domElement);\n\n        }\n\n        this.updateSize();\n        requestAnimationFrame(() => this.updateSize());\n\n    }\n\n    disconnectedCallback() {\n\n        cancelAnimationFrame(this._renderLoopId);\n\n    }\n\n    attributeChangedCallback(attr, oldval, newval) {\n\n        this._updateCollisionVisibility();\n        if (!this.noAutoRecenter) {\n            this.recenter();\n        }\n\n        switch (attr) {\n\n            case 'package':\n            case 'urdf': {\n\n                this._scheduleLoad();\n                break;\n\n            }\n\n            case 'up': {\n\n                this._setUp(this.up);\n                break;\n\n            }\n\n            case 'ambient-color': {\n\n                this.ambientLight.color.set(this.ambientColor);\n                this.ambientLight.groundColor.set('#000').lerp(this.ambientLight.color, 0.5);\n                break;\n\n            }\n\n            case 'ignore-limits': {\n\n                this._setIgnoreLimits(this.ignoreLimits, true);\n                break;\n\n            }\n\n        }\n\n    }\n\n    /* Public API */\n    updateSize() {\n\n        const r = this.renderer;\n        const w = this.clientWidth;\n        const h = this.clientHeight;\n        const currSize = r.getSize(tempVec2);\n\n        if (currSize.width !== w || currSize.height !== h) {\n\n            this.recenter();\n\n        }\n\n        r.setPixelRatio(window.devicePixelRatio);\n        r.setSize(w, h, false);\n\n        this.camera.aspect = w / h;\n        this.camera.updateProjectionMatrix();\n\n    }\n\n    redraw() {\n\n        this._dirty = true;\n    }\n\n    recenter() {\n\n        this._updateEnvironment();\n        this.redraw();\n\n    }\n\n    // Set the joint with jointName to\n    // angle in degrees\n    setJointValue(jointName, ...values) {\n\n        if (!this.robot) return;\n        if (!this.robot.joints[jointName]) return;\n\n        if (this.robot.joints[jointName].setJointValue(...values)) {\n\n            this.redraw();\n            this.dispatchEvent(new CustomEvent('angle-change', { bubbles: true, cancelable: true, detail: jointName }));\n\n        }\n\n    }\n\n    setJointValues(values) {\n\n        for (const name in values) this.setJointValue(name, values[name]);\n\n    }\n\n    /* Private Functions */\n    // Updates the position of the plane to be at the\n    // lowest point below the robot and focuses the\n    // camera on the center of the scene\n    _updateEnvironment() {\n\n        const robot = this.robot;\n        if (!robot) return;\n\n        this.world.updateMatrixWorld();\n\n        const bbox = new THREE.Box3();\n        bbox.makeEmpty();\n        robot.traverse(c => {\n            if (c.isURDFVisual) {\n                bbox.expandByObject(c);\n            }\n        });\n\n        const center = bbox.getCenter(new THREE.Vector3());\n        this.controls.target.y = center.y;\n        this.plane.position.y = bbox.min.y - 1e-3;\n\n        const dirLight = this.directionalLight;\n        dirLight.castShadow = this.displayShadow;\n\n        if (this.displayShadow) {\n\n            // Update the shadow camera rendering bounds to encapsulate the\n            // model. We use the bounding sphere of the bounding box for\n            // simplicity -- this could be a tighter fit.\n            const sphere = bbox.getBoundingSphere(new THREE.Sphere());\n            const minmax = sphere.radius;\n            const cam = dirLight.shadow.camera;\n            cam.left = cam.bottom = -minmax;\n            cam.right = cam.top = minmax;\n\n            // Update the camera to focus on the center of the model so the\n            // shadow can encapsulate it\n            const offset = dirLight.position.clone().sub(dirLight.target.position);\n            dirLight.target.position.copy(center);\n            dirLight.position.copy(center).add(offset);\n\n            cam.updateProjectionMatrix();\n\n        }\n\n    }\n\n    _scheduleLoad() {\n\n        // if our current model is already what's being requested\n        // or has been loaded then early out\n        if (this._prevload === `${ this.package }|${ this.urdf }`) return;\n        this._prevload = `${ this.package }|${ this.urdf }`;\n\n        // if we're already waiting on a load then early out\n        if (this._loadScheduled) return;\n        this._loadScheduled = true;\n\n        if (this.robot) {\n\n            this.robot.traverse(c => c.dispose && c.dispose());\n            this.robot.parent.remove(this.robot);\n            this.robot = null;\n\n        }\n\n        requestAnimationFrame(() => {\n\n            this._loadUrdf(this.package, this.urdf);\n            this._loadScheduled = false;\n\n        });\n\n    }\n\n    // Watch the package and urdf field and load the robot model.\n    // This should _only_ be called from _scheduleLoad because that\n    // ensures the that current robot has been removed\n    _loadUrdf(pkg, urdf) {\n\n        this.dispatchEvent(new CustomEvent('urdf-change', { bubbles: true, cancelable: true, composed: true }));\n\n        if (urdf) {\n\n            // Keep track of this request and make\n            // sure it doesn't get overwritten by\n            // a subsequent one\n            this._requestId++;\n            const requestId = this._requestId;\n\n            const updateMaterials = mesh => {\n\n                mesh.traverse(c => {\n\n                    if (c.isMesh) {\n\n                        c.castShadow = true;\n                        c.receiveShadow = true;\n\n                        if (c.material) {\n\n                            const mats =\n                                (Array.isArray(c.material) ? c.material : [c.material])\n                                    .map(m => {\n\n                                        if (m instanceof THREE.MeshBasicMaterial) {\n\n                                            m = new THREE.MeshPhongMaterial();\n\n                                        }\n\n                                        if (m.map) {\n\n                                            m.map.colorSpace = THREE.SRGBColorSpace;\n\n                                        }\n\n                                        return m;\n\n                                    });\n                            c.material = mats.length === 1 ? mats[0] : mats;\n\n                        }\n\n                    }\n\n                });\n\n            };\n\n            if (pkg.includes(':') && (pkg.split(':')[1].substring(0, 2)) !== '//') {\n                // E.g. pkg = \"pkg_name: path/to/pkg_name, pk2: path2/to/pk2\"}\n\n                // Convert pkg(s) into a map. E.g.\n                // { \"pkg_name\": \"path/to/pkg_name\",\n                //   \"pk2\":      \"path2/to/pk2\"      }\n\n                pkg = pkg.split(',').reduce((map, value) => {\n\n                    const split = value.split(/:/).filter(x => !!x);\n                    const pkgName = split.shift().trim();\n                    const pkgPath = split.join(':').trim();\n                    map[pkgName] = pkgPath;\n\n                    return map;\n\n                }, {});\n            }\n\n            let robot = null;\n            const manager = new THREE.LoadingManager();\n            manager.onLoad = () => {\n\n                // If another request has come in to load a new\n                // robot, then ignore this one\n                if (this._requestId !== requestId) {\n\n                    robot.traverse(c => c.dispose && c.dispose());\n                    return;\n\n                }\n\n                this.robot = robot;\n                this.world.add(robot);\n                updateMaterials(robot);\n\n                this._setIgnoreLimits(this.ignoreLimits);\n                this._updateCollisionVisibility();\n\n                this.dispatchEvent(new CustomEvent('urdf-processed', { bubbles: true, cancelable: true, composed: true }));\n                this.dispatchEvent(new CustomEvent('geometry-loaded', { bubbles: true, cancelable: true, composed: true }));\n\n                this.recenter();\n\n            };\n\n            if (this.urlModifierFunc) {\n\n                manager.setURLModifier(this.urlModifierFunc);\n\n            }\n\n            const loader = new URDFLoader(manager);\n            loader.packages = pkg;\n            loader.loadMeshCb = this.loadMeshFunc;\n            loader.fetchOptions = { mode: 'cors', credentials: 'same-origin' };\n            loader.parseCollision = true;\n            loader.load(urdf, model => robot = model);\n\n        }\n\n    }\n\n    _updateCollisionVisibility() {\n\n        const showCollision = this.showCollision;\n        const collisionMaterial = this._collisionMaterial;\n        const robot = this.robot;\n\n        if (robot === null) return;\n\n        const colliders = [];\n        robot.traverse(c => {\n\n            if (c.isURDFCollider) {\n\n                c.visible = showCollision;\n                colliders.push(c);\n\n            }\n\n        });\n\n        colliders.forEach(coll => {\n\n            coll.traverse(c => {\n\n                if (c.isMesh) {\n\n                    c.raycast = emptyRaycast;\n                    c.material = collisionMaterial;\n                    c.castShadow = false;\n\n                }\n\n            });\n\n        });\n\n    }\n\n    // Watch the coordinate frame and update the\n    // rotation of the scene to match\n    _setUp(up) {\n\n        if (!up) up = '+Z';\n        up = up.toUpperCase();\n        const sign = up.replace(/[^-+]/g, '')[0] || '+';\n        const axis = up.replace(/[^XYZ]/gi, '')[0] || 'Z';\n\n        const PI = Math.PI;\n        const HALFPI = PI / 2;\n        if (axis === 'X') this.world.rotation.set(0, 0, sign === '+' ? HALFPI : -HALFPI);\n        if (axis === 'Z') this.world.rotation.set(sign === '+' ? -HALFPI : HALFPI, 0, 0);\n        if (axis === 'Y') this.world.rotation.set(sign === '+' ? 0 : PI, 0, 0);\n\n    }\n\n    // Updates the current robot's angles to ignore\n    // joint limits or not\n    _setIgnoreLimits(ignore, dispatch = false) {\n\n        if (this.robot) {\n\n            Object\n                .values(this.robot.joints)\n                .forEach(joint => {\n\n                    joint.ignoreLimits = ignore;\n                    joint.setJointValue(...joint.jointValue);\n\n                });\n\n        }\n\n        if (dispatch) {\n\n            this.dispatchEvent(new CustomEvent('ignore-limits-change', { bubbles: true, cancelable: true, composed: true }));\n\n        }\n\n    }\n\n};\n", "import { Raycaster, Vector3, Plane, Vector2 } from 'three';\n\n// Find the nearest parent that is a joint\nfunction isJoint(j) {\n\n    return j.isURDFJoint && j.jointType !== 'fixed';\n\n};\n\nfunction findNearestJoint(child) {\n\n    let curr = child;\n    while (curr) {\n\n        if (isJoint(curr)) {\n\n            return curr;\n\n        }\n\n        curr = curr.parent;\n\n    }\n\n    return curr;\n\n};\n\nconst prevHitPoint = new Vector3();\nconst newHitPoint = new Vector3();\nconst pivotPoint = new Vector3();\nconst tempVector = new Vector3();\nconst tempVector2 = new Vector3();\nconst projectedStartPoint = new Vector3();\nconst projectedEndPoint = new Vector3();\nconst plane = new Plane();\nexport class URDFDragControls {\n\n    constructor(scene) {\n\n        this.enabled = true;\n        this.scene = scene;\n        this.raycaster = new Raycaster();\n        this.initialGrabPoint = new Vector3();\n\n        this.hitDistance = -1;\n        this.hovered = null;\n        this.manipulating = null;\n\n    }\n\n    update() {\n\n        const {\n            raycaster,\n            hovered,\n            manipulating,\n            scene,\n        } = this;\n\n        if (manipulating) {\n\n            return;\n\n        }\n\n        let hoveredJoint = null;\n        const intersections = raycaster.intersectObject(scene, true);\n        if (intersections.length !== 0) {\n\n            const hit = intersections[0];\n            this.hitDistance = hit.distance;\n            hoveredJoint = findNearestJoint(hit.object);\n            this.initialGrabPoint.copy(hit.point);\n\n        }\n\n        if (hoveredJoint !== hovered) {\n\n            if (hovered) {\n\n                this.onUnhover(hovered);\n\n            }\n\n            this.hovered = hoveredJoint;\n\n            if (hoveredJoint) {\n\n                this.onHover(hoveredJoint);\n\n            }\n\n        }\n\n    }\n\n    updateJoint(joint, angle) {\n\n        joint.setJointValue(angle);\n\n    }\n\n    onDragStart(joint) {\n\n    }\n\n    onDragEnd(joint) {\n\n    }\n\n    onHover(joint) {\n\n    }\n\n    onUnhover(joint) {\n\n    }\n\n    getRevoluteDelta(joint, startPoint, endPoint) {\n\n        // set up the plane\n        tempVector\n            .copy(joint.axis)\n            .transformDirection(joint.matrixWorld)\n            .normalize();\n        pivotPoint\n            .set(0, 0, 0)\n            .applyMatrix4(joint.matrixWorld);\n        plane\n            .setFromNormalAndCoplanarPoint(tempVector, pivotPoint);\n\n        // project the drag points onto the plane\n        plane.projectPoint(startPoint, projectedStartPoint);\n        plane.projectPoint(endPoint, projectedEndPoint);\n\n        // get the directions relative to the pivot\n        projectedStartPoint.sub(pivotPoint);\n        projectedEndPoint.sub(pivotPoint);\n\n        tempVector.crossVectors(projectedStartPoint, projectedEndPoint);\n\n        const direction = Math.sign(tempVector.dot(plane.normal));\n        return direction * projectedEndPoint.angleTo(projectedStartPoint);\n\n    }\n\n    getPrismaticDelta(joint, startPoint, endPoint) {\n\n        tempVector.subVectors(endPoint, startPoint);\n        plane\n            .normal\n            .copy(joint.axis)\n            .transformDirection(joint.parent.matrixWorld)\n            .normalize();\n\n        return tempVector.dot(plane.normal);\n\n    }\n\n    moveRay(toRay) {\n\n        const { raycaster, hitDistance, manipulating } = this;\n        const { ray } = raycaster;\n\n        if (manipulating) {\n\n            ray.at(hitDistance, prevHitPoint);\n            toRay.at(hitDistance, newHitPoint);\n\n            let delta = 0;\n            if (manipulating.jointType === 'revolute' || manipulating.jointType === 'continuous') {\n\n                delta = this.getRevoluteDelta(manipulating, prevHitPoint, newHitPoint);\n\n            } else if (manipulating.jointType === 'prismatic') {\n\n                delta = this.getPrismaticDelta(manipulating, prevHitPoint, newHitPoint);\n\n            }\n\n            if (delta) {\n\n                this.updateJoint(manipulating, manipulating.angle + delta);\n\n            }\n\n        }\n\n        this.raycaster.ray.copy(toRay);\n        this.update();\n\n    }\n\n    setGrabbed(grabbed) {\n\n        const { hovered, manipulating } = this;\n\n        if (grabbed) {\n\n            if (manipulating !== null || hovered === null) {\n\n                return;\n\n            }\n\n            this.manipulating = hovered;\n            this.onDragStart(hovered);\n\n        } else {\n\n            if (this.manipulating === null) {\n                return;\n            }\n\n            this.onDragEnd(this.manipulating);\n            this.manipulating = null;\n            this.update();\n\n        }\n\n    }\n\n}\n\nexport class PointerURDFDragControls extends URDFDragControls {\n\n    constructor(scene, camera, domElement) {\n\n        super(scene);\n        this.camera = camera;\n        this.domElement = domElement;\n\n        const raycaster = new Raycaster();\n        const mouse = new Vector2();\n\n        function updateMouse(e) {\n\n            const rect = domElement.getBoundingClientRect();\n            mouse.x = ((e.clientX - rect.left) / rect.width) * 2 - 1;\n            mouse.y = -((e.clientY - rect.top) / rect.height) * 2 + 1;\n\n        }\n\n        this._mouseDown = e => {\n\n            updateMouse(e);\n            raycaster.setFromCamera(mouse, this.camera);\n            this.moveRay(raycaster.ray);\n            this.setGrabbed(true);\n\n        };\n\n        this._mouseMove = e => {\n\n            updateMouse(e);\n            raycaster.setFromCamera(mouse, this.camera);\n            this.moveRay(raycaster.ray);\n\n        };\n\n        this._mouseUp = e => {\n\n            updateMouse(e);\n            raycaster.setFromCamera(mouse, this.camera);\n            this.moveRay(raycaster.ray);\n            this.setGrabbed(false);\n\n        };\n\n        domElement.addEventListener('mousedown', this._mouseDown);\n        domElement.addEventListener('mousemove', this._mouseMove);\n        domElement.addEventListener('mouseup', this._mouseUp);\n\n    }\n\n    getRevoluteDelta(joint, startPoint, endPoint) {\n\n        const { camera, initialGrabPoint } = this;\n\n        // set up the plane\n        tempVector\n            .copy(joint.axis)\n            .transformDirection(joint.matrixWorld)\n            .normalize();\n        pivotPoint\n            .set(0, 0, 0)\n            .applyMatrix4(joint.matrixWorld);\n        plane\n            .setFromNormalAndCoplanarPoint(tempVector, pivotPoint);\n\n        tempVector\n            .copy(camera.position)\n            .sub(initialGrabPoint)\n            .normalize();\n\n        // if looking into the plane of rotation\n        if (Math.abs(tempVector.dot(plane.normal)) > 0.3) {\n\n            return super.getRevoluteDelta(joint, startPoint, endPoint);\n\n        } else {\n\n            // get the up direction\n            tempVector.set(0, 1, 0).transformDirection(camera.matrixWorld);\n\n            // get points projected onto the plane of rotation\n            plane.projectPoint(startPoint, projectedStartPoint);\n            plane.projectPoint(endPoint, projectedEndPoint);\n\n            tempVector.set(0, 0, -1).transformDirection(camera.matrixWorld);\n            tempVector.cross(plane.normal);\n            tempVector2.subVectors(endPoint, startPoint);\n\n            return tempVector.dot(tempVector2);\n\n        }\n\n    }\n\n    dispose() {\n\n        const { domElement } = this;\n        domElement.removeEventListener('mousedown', this._mouseDown);\n        domElement.removeEventListener('mousemove', this._mouseMove);\n        domElement.removeEventListener('mouseup', this._mouseUp);\n\n    }\n\n}\n", "import * as THREE from 'three';\nimport URDFViewer from './urdf-viewer-element.js';\nimport { PointerURDFDragControls } from './URDFDragControls.js';\n\n// urdf-manipulator element\n// Displays a URDF model that can be manipulated with the mouse\n\n// Events\n// joint-mouseover: Fired when a joint is hovered over\n// joint-mouseout: Fired when a joint is no longer hovered over\n// manipulate-start: Fires when a joint is manipulated\n// manipulate-end: Fires when a joint is done being manipulated\nexport default\nclass URDFManipulator extends URDFViewer {\n\n    static get observedAttributes() {\n\n        return ['highlight-color', ...super.observedAttributes];\n\n    }\n\n    get disableDragging() { return this.hasAttribute('disable-dragging'); }\n    set disableDragging(val) { val ? this.setAttribute('disable-dragging', !!val) : this.removeAttribute('disable-dragging'); }\n\n    get highlightColor() { return this.getAttribute('highlight-color') || '#FFFFFF'; }\n    set highlightColor(val) { val ? this.setAttribute('highlight-color', val) : this.removeAttribute('highlight-color'); }\n\n    constructor(...args) {\n\n        super(...args);\n\n        // The highlight material\n        this.highlightMaterial =\n            new THREE.MeshPhongMaterial({\n                shininess: 10,\n                color: this.highlightColor,\n                emissive: this.highlightColor,\n                emissiveIntensity: 0.25,\n            });\n\n        const isJoint = j => {\n\n            return j.isURDFJoint && j.jointType !== 'fixed';\n\n        };\n\n        // Highlight the link geometry under a joint\n        const highlightLinkGeometry = (m, revert) => {\n\n            const traverse = c => {\n\n                // Set or revert the highlight color\n                if (c.type === 'Mesh') {\n\n                    if (revert) {\n\n                        c.material = c.__origMaterial;\n                        delete c.__origMaterial;\n\n                    } else {\n\n                        c.__origMaterial = c.material;\n                        c.material = this.highlightMaterial;\n\n                    }\n\n                }\n\n                // Look into the children and stop if the next child is\n                // another joint\n                if (c === m || !isJoint(c)) {\n\n                    for (let i = 0; i < c.children.length; i++) {\n\n                        const child = c.children[i];\n                        if (!child.isURDFCollider) {\n\n                            traverse(c.children[i]);\n\n                        }\n\n                    }\n\n                }\n\n            };\n\n            traverse(m);\n\n        };\n\n        const el = this.renderer.domElement;\n\n        const dragControls = new PointerURDFDragControls(this.scene, this.camera, el);\n        dragControls.onDragStart = joint => {\n\n            this.dispatchEvent(new CustomEvent('manipulate-start', { bubbles: true, cancelable: true, detail: joint.name }));\n            this.controls.enabled = false;\n            this.redraw();\n\n        };\n        dragControls.onDragEnd = joint => {\n\n            this.dispatchEvent(new CustomEvent('manipulate-end', { bubbles: true, cancelable: true, detail: joint.name }));\n            this.controls.enabled = true;\n            this.redraw();\n\n        };\n        dragControls.updateJoint = (joint, angle) => {\n\n            this.setJointValue(joint.name, angle);\n\n        };\n        dragControls.onHover = joint => {\n\n            highlightLinkGeometry(joint, false);\n            this.dispatchEvent(new CustomEvent('joint-mouseover', { bubbles: true, cancelable: true, detail: joint.name }));\n            this.redraw();\n\n        };\n        dragControls.onUnhover = joint => {\n\n            highlightLinkGeometry(joint, true);\n            this.dispatchEvent(new CustomEvent('joint-mouseout', { bubbles: true, cancelable: true, detail: joint.name }));\n            this.redraw();\n\n        };\n\n        this.dragControls = dragControls;\n\n    }\n\n    disconnectedCallback() {\n\n        super.disconnectedCallback();\n        this.dragControls.dispose();\n\n    }\n\n    attributeChangedCallback(attr, oldval, newval) {\n\n        super.attributeChangedCallback(attr, oldval, newval);\n\n        switch (attr) {\n\n            case 'highlight-color':\n                this.highlightMaterial.color.set(this.highlightColor);\n                this.highlightMaterial.emissive.set(this.highlightColor);\n                break;\n\n        }\n\n    }\n\n};\n"],
  "mappings": "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",
  "names": ["document", "j", "materialMap", "plane", "isJoint"]
}
